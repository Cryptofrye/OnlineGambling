[["index.html", "Winning and losing in online gambling Chapter 1 Introduction", " Winning and losing in online gambling 2022-04-20 Chapter 1 Introduction In this file, we provide all code used analyze the summary data. Raw data files are not used in this analysis. "],["libraries-and-session-info.html", "Chapter 2 Libraries and session info", " Chapter 2 Libraries and session info Here we load libraries, create a folder for saving figures and define global variables. Note that this part of code is needed for the remaining code to run. library(knitr) library(bookdown) library(VennDiagram) library(Rmisc) library(tidyverse) library(patchwork) library(ggpubr) library(kableExtra) library(BayesFactor) library(afex) source(&quot;function/TES.R&quot;) # automatically create a bib database for R packages knitr::write_bib(c( .packages(), &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39; ), &#39;packages.bib&#39;) # check if figure folder exists, if not, create a new one if(!dir.exists(&quot;figure&quot;)){ dir.create(&quot;figure&quot;) } # Suppress summarize info options(dplyr.summarise.inform = FALSE) # set the theme to theme_bw() for all ggplot2 figures # and put the figure legend on top of the figure, in a horizontal direction theme_set(theme_bw() + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;)) # use colorblind friendly colors color_values &lt;- c(&quot;#56B4E9&quot;, &quot;#E69F00&quot;) # size of the shapes in the figures shape_size &lt;- 2.5 # dodge width dodge_width &lt;- 0.35 sessionInfo() ## R version 4.0.4 (2021-02-15) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur 10.16 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages: ## [1] afex_0.27-2 lme4_1.1-26 BayesFactor_0.9.12-4.2 ## [4] Matrix_1.3-2 coda_0.19-4 kableExtra_1.2.1 ## [7] ggpubr_0.4.0 patchwork_1.0.1 forcats_0.5.1 ## [10] stringr_1.4.0 dplyr_1.0.7 purrr_0.3.4 ## [13] readr_1.4.0 tidyr_1.1.3 tibble_3.1.3 ## [16] ggplot2_3.3.5 tidyverse_1.3.1 Rmisc_1.5 ## [19] plyr_1.8.6 lattice_0.20-41 VennDiagram_1.6.20 ## [22] futile.logger_1.4.3 bookdown_0.21 knitr_1.31 ## ## loaded via a namespace (and not attached): ## [1] TH.data_1.0-10 minqa_1.2.4 colorspace_2.0-2 ## [4] ggsignif_0.6.0 ellipsis_0.3.2 rio_0.5.16 ## [7] estimability_1.3 fs_1.5.0 rstudioapi_0.13 ## [10] MatrixModels_0.5-0 fansi_0.5.0 mvtnorm_1.1-2 ## [13] lubridate_1.7.10 xml2_1.3.2 codetools_0.2-18 ## [16] splines_4.0.4 jsonlite_1.7.2 nloptr_1.2.2.2 ## [19] broom_0.7.12 dbplyr_2.1.1 compiler_4.0.4 ## [22] httr_1.4.2 emmeans_1.5.4 backports_1.2.1 ## [25] assertthat_0.2.1 cli_3.0.1 formatR_1.7 ## [28] htmltools_0.5.1.1 tools_4.0.4 lmerTest_3.1-3 ## [31] gtable_0.3.0 glue_1.4.2 reshape2_1.4.4 ## [34] Rcpp_1.0.7 carData_3.0-4 cellranger_1.1.0 ## [37] jquerylib_0.1.4 vctrs_0.3.8 nlme_3.1-152 ## [40] xfun_0.21 openxlsx_4.2.2 rvest_1.0.0 ## [43] lifecycle_1.0.0 gtools_3.8.2 statmod_1.4.35 ## [46] rstatix_0.6.0 zoo_1.8-9 MASS_7.3-53 ## [49] scales_1.1.1 hms_1.0.0 sandwich_3.0-0 ## [52] parallel_4.0.4 lambda.r_1.2.4 yaml_2.2.1 ## [55] curl_4.3 pbapply_1.4-3 sass_0.4.0 ## [58] stringi_1.7.3 boot_1.3-26 zip_2.1.1 ## [61] rlang_0.4.11 pkgconfig_2.0.3 evaluate_0.14 ## [64] tidyselect_1.1.1 magrittr_2.0.1 R6_2.5.0 ## [67] generics_0.1.0 multcomp_1.4-14 DBI_1.1.1 ## [70] pillar_1.6.2 haven_2.3.1 foreign_0.8-81 ## [73] withr_2.4.2 survival_3.2-7 abind_1.4-5 ## [76] modelr_0.1.8 crayon_1.4.1 car_3.0-9 ## [79] futile.options_1.0.1 utf8_1.2.2 rmarkdown_2.7 ## [82] readxl_1.3.1 data.table_1.13.0 reprex_2.0.1 ## [85] digest_0.6.27 webshot_0.5.2 xtable_1.8-4 ## [88] numDeriv_2016.8-1.1 munsell_0.5.0 viridisLite_0.4.0 ## [91] bslib_0.2.5.1 "],["process-data.html", "Chapter 3 Process data 3.1 Player and play behavior 3.2 When to stop 3.3 Stake change 3.4 Speed of play", " Chapter 3 Process data The raw data on the round level cannot be shared as they are proprietary. We nevertheless provide the code that we used to process the raw data to get the player-level summary data. The summary data are in the data/processed folder and can be used to reproduce the results in the paper. #### load data from high-risk players #### # get all folders where data from high-risk players are saved folders &lt;- list.dirs(&quot;../../data/raw/data_addict_players&quot;, full.names = TRUE, recursive = FALSE) # get all file names files &lt;- paste0(folders, &quot;/rounds_data.csv&quot;) # read csv files d_high_risk &lt;- files %&gt;% map_dfr(~read_csv(.x, skip = 1, col_names = c(&quot;id_player&quot;, &quot;level&quot;,&quot;id_session&quot;, &quot;id_round&quot;, &quot;stake&quot;, &quot;win&quot;, &quot;rt_start&quot;, &quot;rt1&quot;, &quot;rt2&quot;, &quot;rt3&quot;, &quot;rt4&quot;, &quot;rt5&quot;, &quot;rt6&quot;, &quot;rt7&quot;, &quot;rt8&quot;, &quot;rt9&quot;, &quot;rt10&quot;, &quot;rt11&quot;, &quot;rt12&quot;, &quot;bonus&quot;), col_types = cols(.default = col_character()))) # load demographic data (age and gender) d_high_risk_demo &lt;- read_delim(&quot;../../data/raw/meta_data_addict_players.csv&quot;, delim = &quot;;&quot;, col_types = cols(.default = col_character())) # add demographic information to the main data frame d_high_risk &lt;- d_high_risk %&gt;% left_join(d_high_risk_demo, by = c(&quot;id_player&quot; = &quot;id&quot;)) #### load data from low-risk players #### # get all folders where data from low-risk players are saved folders &lt;- list.dirs(&quot;../../data/raw/data_non_addict_players&quot;, full.names = TRUE, recursive = FALSE) # get all file names files &lt;- paste0(folders, &quot;/rounds_data.csv&quot;) # read csv files d_low_risk &lt;- files %&gt;% map_dfr(~read_csv(.x, skip = 1, col_names = c(&quot;id_player&quot;, &quot;id_session&quot;, &quot;id_round&quot;, &quot;stake&quot;, &quot;win&quot;, &quot;rt_start&quot;, &quot;rt1&quot;, &quot;rt2&quot;, &quot;rt3&quot;, &quot;rt4&quot;, &quot;rt5&quot;, &quot;rt6&quot;, &quot;rt7&quot;, &quot;rt8&quot;, &quot;rt9&quot;, &quot;rt10&quot;, &quot;rt11&quot;, &quot;rt12&quot;, &quot;bonus&quot;), col_types = cols(.default = col_character()))) # load demographic data (age and gender) d_low_risk_demo &lt;- read_delim(&quot;../../data/raw/meta_data_non_addict_players.csv&quot;, delim = &quot;;&quot;, col_types = cols(.default = col_character())) # add demographic information to the main data frame d_low_risk &lt;- d_low_risk %&gt;% left_join(d_low_risk_demo, by = c(&quot;id_player&quot; = &quot;id&quot;)) #### quality checks #### # check if the two groups consist of different players high_risk_players &lt;- unique(d_high_risk$id_player) low_risk_players &lt;- unique(d_low_risk$id_player) # all(high_risk_players %in% low_risk_players == FALSE) # all(low_risk_players %in% high_risk_players == FALSE) # both commands above return TRUE, showing that # the two groups have different anonymous player IDs. # Thus, the two groups indeed consist of different players. #### combine data #### d_low_risk &lt;- d_low_risk %&gt;% mutate( # add group name, group = &quot;Low-Risk&quot;, # low-risk players all have a risk level of 0 level = 0 ) %&gt;% select(group, level, everything()) d_high_risk &lt;- d_high_risk %&gt;% mutate( # add group name, group = &quot;High-Risk&quot; ) %&gt;% select(group, level, everything()) # combine data from both groups d &lt;- rbind(d_high_risk, d_low_risk) # remove the original two data frames remove(d_high_risk) remove(d_low_risk) #### clean data #### # change player id, session id and round id into integers d &lt;- d %&gt;% # each player gets a unique number, starting from 1 mutate(id_player = match(id_player, unique(id_player))) %&gt;% # within each player, each session gets a unique number, starting from 1 group_by(id_player) %&gt;% mutate(id_session = match(id_session, unique(id_session))) %&gt;% # each round within each session gets a unique number, starting from 1 group_by(id_player, id_session) %&gt;% mutate(id_round = row_number()) %&gt;% ungroup() # change some variables (stake, win, RTs etc.) into numeric d &lt;- d %&gt;% mutate( across(stake:rt12, as.numeric), across(c(level, age), as.numeric) ) # create new variables for the stake, win amount on the previous round, # and whether there is a bonus game or not on the previous round. d &lt;- d %&gt;% group_by(id_player, id_session) %&gt;% mutate( prev_stake = lag(stake), prev_win = lag(win), prev_bonus = lag(bonus) ) %&gt;% ungroup() 3.1 Player and play behavior 3.1.1 descriptive_data.csv First, we process the data to get descriptive data on the players and their general play behaviors. The descriptive_data.csv file contains the following variables. group: the group to which a player belongs, High-Risk or Low-Risk. id_player: the anonymous id of a player. age: age of a player. gender: gender of a player, Female or Male. risk_0: whether the player receives a risk level of 0 in the data, 1 = yes, 0 = no. risk_3: whether the player receives a risk level of 3 in the data, 1 = yes, 0 = no. risk_4: whether the player receives a risk level of 4 in the data, 1 = yes, 0 = no. risk_5: whether the player receives a risk level of 5 in the data, 1 = yes, 0 = no. n_session: the total number of sessions played by each player. n_round_total: the total number of rounds played by each player. n_round_mean: the mean number of rounds played per session. n_round_median: the median number of rounds played per session. bet_max: the maximum bet size across all rounds, in euro. bet_min: the minimum bet size across all rounds, in euro. bet_mean: the mean bet size across all rounds, in euro. bet_median: the median bet size across all rounds, in euro. win_prob: the probability of winning (%) across all rounds. win_max: the maximum amount of win on rounds when players win, in euro. Win defined as the win amount minus the stake amount. win_min: the minimum amount of win on rounds when players win, in euro. win_mean: the mean amount of win on rounds when players win, in euro. win_median: the median amount of win on rounds when players win, in euro. loss_max: the maximum amount of loss on rounds when players lose, in euro. Loss amount equals the stake amount. loss_min: the minimum amount of loss on rounds when players lose, in euro. loss_mean: the mean amount of loss on rounds when players lose, in euro. loss_median: the median amount of loss on rounds when players lose, in euro. total_spent: the total amount of money spent (i.e., lost), in euro. A negative value indicates that players overall won money. # get the age and gender of each player age_gender &lt;- d %&gt;% group_by(id_player) %&gt;% sample_n(1) %&gt;% mutate(gender = recode(gender, F = &quot;Female&quot;, M = &quot;Male&quot;)) %&gt;% select(group, id_player, age, gender) # get the risk level(s) of each player risk_level_0 &lt;- d %&gt;% filter(level == 0) %&gt;% .$id_player %&gt;% unique risk_level_3 &lt;- d %&gt;% filter(level == 3) %&gt;% .$id_player %&gt;% unique risk_level_4 &lt;- d %&gt;% filter(level == 4) %&gt;% .$id_player %&gt;% unique risk_level_5 &lt;- d %&gt;% filter(level == 5) %&gt;% .$id_player %&gt;% unique risk_levels &lt;- age_gender %&gt;% mutate( risk_0 = ifelse(id_player %in% risk_level_0, 1, 0), risk_3 = ifelse(id_player %in% risk_level_3, 1, 0), risk_4 = ifelse(id_player %in% risk_level_4, 1, 0), risk_5 = ifelse(id_player %in% risk_level_5, 1, 0) ) %&gt;% select(id_player, risk_0, risk_3, risk_4, risk_5) # count the number of sessions and rounds for each player rounds &lt;- d %&gt;% # count the number of rounds in each session count(id_player, id_session) %&gt;% # count for each player: group_by(id_player) %&gt;% summarize( n_session = n(), # the total number of sessions n_round_total = sum(n), # the total number of rounds (all sessions combined) n_round_mean = mean(n), # the mean number of rounds per session n_round_median = median(n) # the median number of rounds per session ) %&gt;% select(id_player, n_session, n_round_total, n_round_mean, n_round_median) # for each player, calculate the max, min, mean and median of stakes across all rounds bets &lt;- d %&gt;% group_by(id_player) %&gt;% summarize( bet_max = max(stake), bet_min = min(stake), bet_mean = mean(stake), bet_median = median(stake) ) %&gt;% select(id_player, bet_max, bet_min, bet_mean, bet_median) # for each player, calculate their winning probability, the min, max, mean and median win amount win_prob &lt;- d %&gt;% group_by(id_player) %&gt;% summarize(win_prob = mean(win &gt; 0) * 100) %&gt;% select(id_player, win_prob) wins &lt;- d %&gt;% # select winning rounds filter(win &gt; 0) %&gt;% # for each player, calculate the max, min, mean and median win amount # the real win amount is the win amount displayed by the game, minus the stake mutate(win = win - stake) %&gt;% group_by(id_player) %&gt;% summarize( win_max = max(win), win_min = min(win), win_mean = mean(win), win_median = median(win) ) %&gt;% select(id_player, win_max, win_min, win_mean, win_median) # on the rounds where players lost # calculate their max, min, mean, median and total loss amount losses &lt;- d %&gt;% # select losing rounds filter(win == 0) %&gt;% # loss the same as the stake mutate(loss = stake) %&gt;% group_by(id_player) %&gt;% summarize( loss_max = max(loss), loss_min = min(loss), loss_mean = mean(loss), loss_median = median(loss), ) %&gt;% select(id_player, loss_max, loss_min, loss_mean, loss_median) # for each player, calculate the total spent total_spent &lt;- d %&gt;% mutate(spent = stake - win) %&gt;% group_by(id_player) %&gt;% summarize(total_spent = sum(spent)) # put all data frames together d_descriptive &lt;- age_gender %&gt;% full_join(risk_levels, by = &quot;id_player&quot;) %&gt;% full_join(rounds, by = &quot;id_player&quot;) %&gt;% full_join(bets, by = &quot;id_player&quot;) %&gt;% full_join(win_prob, by = &quot;id_player&quot;) %&gt;% full_join(wins, by = &quot;id_player&quot;) %&gt;% full_join(losses, by = &quot;id_player&quot;) %&gt;% full_join(total_spent, by = &quot;id_player&quot;) # save the data frames as a csv file write_csv(d_descriptive, &quot;../../data/processed/descriptive_data.csv&quot;) # remove data frames remove(age_gender, risk_levels, rounds, bets, win_prob, wins, losses, total_spent, d_descriptive) 3.1.2 bet_counts.csv On each round, players can choose one of ten different bet sizes (from 0.25 euro to 20 euro). To characterize the betting patterns, for each player we count the number of rounds where they chose a certain bet size. The data are saved in the bet_counts.csv file, which contains the following variables. group: the group to which a player belongs, High-Risk or Low-Risk. id_player: the anonymous id of a player. stake: the amount of money a player bets on a round, from 0.25 till 20, in euro. n_round: the number of rounds where a player chose a certain bet size. n_round_total: the total number of rounds played by each player. prop: the relative proportion of choosing a certain bet size for each player, from 0 (%) till 100 (%). # get all the unique levels of bet sizes bet_sizes &lt;- unique(d$stake) bet_sizes &lt;- sort(bet_sizes, decreasing = F) # for each player, count how often each bet size is selected bets_count &lt;- d %&gt;% # turn the variable stake into a factor with all ten 10 possible levels mutate(stake = factor(stake, levels = bet_sizes)) %&gt;% # for each player, count the number of rounds with a certain stake size count(group, id_player, stake, .drop = F, name = &quot;n_round&quot;) %&gt;% # calculate the total number of rounds for each player # and based on that, the relative proportion of choosing a certain stake size group_by(group, id_player) %&gt;% mutate( n_round_total = sum(n_round), # the total number of rounds prop = n_round/n_round_total * 100 # the relative proportion of choosing a certain bet ) %&gt;% ungroup() # save the data frame as a csv file write_csv(bets_count, &quot;../../data/processed/bets_count.csv&quot;) # remove data frame(s) remove(bets_count) 3.2 When to stop 3.2.1 stop.csv After each round, players can choose either to continue playing, or stop. Here we prepare data on the probability of ending a session after a win or a loss. The data are saved in the stop.csv file, which contains the following variables. group: the group to which a player belongs, High-Risk or Low-Risk. id_player: the anonymous id of a player. outcome: the outcome of a round, win or loss. total_count: the total number of rounds with a particular outcome (win or loss). stop_count: the total number of rounds after which a player decided to end a session. stop_prob: the probability (%) of ending a session after a particular outcome. This variable is computed by dividing stop_count by total_count and then multiplied by 100. stop_overall: the overall probability (%) of ending a session regardless of the outcome of a round. This variable is computed by dividing the number of rounds at the end of a session by the total number of rounds (all sessions combined), and then multiplied by 100. # for each player, compute their overall probability of stopping stop_prob &lt;- d %&gt;% group_by(group, id_player, id_session) %&gt;% mutate( # if a certain round has the largest round id in a session # it means that round is the last one, and player ended the session afterwards round_pos = ifelse(id_round == max(id_round), &quot;end&quot;, &quot;in&quot;) ) %&gt;% group_by(group, id_player) %&gt;% summarise( total_count = n(), stop_count = sum(round_pos == &quot;end&quot;), stop_overall = stop_count/total_count * 100 ) # for each player, compute the probability of stopping after a win and a loss stop_prob_outcome &lt;- d %&gt;% group_by(group, id_player, id_session) %&gt;% mutate( # if a certain round has the largest id in a session # it means that round is the last one, and player ended the session afterwards round_pos = ifelse(id_round == max(id_round), &quot;end&quot;, &quot;in&quot;), # determine whether each round is a win or a loss outcome = ifelse(win &gt; 0, &quot;win&quot;, &quot;loss&quot;) ) %&gt;% group_by(group, id_player, outcome) %&gt;% summarise( total_count = n(), # the total number of winning or losing rounds stop_count = sum(round_pos == &quot;end&quot;), # the number of winning or losing rounds at session end stop_prob = stop_count/total_count * 100 # the probability of stopping after winning or losing ) # combine the overall probability of stopping and # the probability of stopping after winning or losing stop &lt;- stop_prob %&gt;% select(group, id_player, stop_overall) %&gt;% full_join(stop_prob_outcome, by = c(&quot;group&quot;, &quot;id_player&quot;)) %&gt;% select(group, id_player, outcome, total_count, stop_count, stop_prob, stop_overall) # save the data frame as a csv file write_csv(stop, &quot;../../data/processed/stop.csv&quot;) # remove data frame(s) remove(stop, stop_prob, stop_prob_outcome) 3.2.2 stop_breaks.csv Players might take a break without logging off. To take such breaks in play into account, we assume that whenever players took more than 10 minutes to make a move, it means that they had taken a break. A new session starts after such a break. The data are saved in the stop_breaks.csv file, which contains the following variables. group: the group to which a player belongs, High-Risk or Low-Risk. id_player: the anonymous id of a player. outcome: the outcome of a round, win or loss. total_count: the total number of rounds with a particular outcome (win or loss). stop_count: the total number of rounds after which a player decided to end a session. stop_prob: the probability (%) of ending a session after a particular outcome. This value is computed by dividing stop_count by total_count and then multiplied by 100. stop_overall: the overall probability (%) of ending a session regardless of the outcome of a round. This variable is computed by dividing the number of rounds at the end of a session by the total number of rounds (all sessions combined), and then multiplied by 100. # when any one of the 13 responses took longer than 10 minutes # (i.e., 10 * 60 * 1000 milliseconds), a break occurs break_duration &lt;- 10*60*1000 d &lt;- d %&gt;% rowwise() %&gt;% mutate( breaks = ifelse( any(rt_start &gt; break_duration, rt1 &gt; break_duration, rt2 &gt; break_duration, rt3 &gt; break_duration, rt4 &gt; break_duration, rt5 &gt; break_duration, rt6 &gt; break_duration, rt7 &gt; break_duration, rt8 &gt; break_duration, rt9 &gt; break_duration, rt10 &gt; break_duration, rt11 &gt; break_duration, rt12 &gt; break_duration), 1, 0 ) ) # define new sessions by taking breaks into account d &lt;- d %&gt;% ungroup() %&gt;% mutate( break_count = cumsum(breaks), new_id_session = paste(id_session, break_count, sep = &quot;_&quot;) ) %&gt;% # within each player, each session gets a unique number, starting from 1 group_by(id_player) %&gt;% mutate(new_id_session = match(new_id_session, unique(new_id_session))) # check the number of sessions when breaks are accounted for sessions_count &lt;- d %&gt;% group_by(id_player) %&gt;% summarize( n_old_session = n_distinct(id_session), n_new_session = n_distinct(new_id_session) ) %&gt;% mutate(diff = n_new_session - n_old_session) # now compute the probabilities of stopping # for each player, compute their overall probability of stopping stop_prob &lt;- d %&gt;% group_by(group, id_player, new_id_session) %&gt;% mutate( # if a certain round has the largest id in a session # it means that round is the last one, and player ended the session afterwards round_pos = ifelse(id_round == max(id_round), &quot;end&quot;, &quot;in&quot;) ) %&gt;% group_by(group, id_player) %&gt;% summarise( total_count = n(), stop_count = sum(round_pos == &quot;end&quot;), stop_overall = stop_count/total_count * 100 ) # for each player, compute the probability of stopping after a win or a loss stop_prob_outcome &lt;- d %&gt;% group_by(group, id_player, new_id_session) %&gt;% mutate( # if a certain round has the largest id in a session # it means that round is the last one, and player ended the session afterwards round_pos = ifelse(id_round == max(id_round), &quot;end&quot;, &quot;in&quot;), # determine if each round is a win or a loss outcome = ifelse(win &gt; 0, &quot;win&quot;, &quot;loss&quot;) ) %&gt;% group_by(group, id_player, outcome) %&gt;% summarise( total_count = n(), stop_count = sum(round_pos == &quot;end&quot;), stop_prob = stop_count/total_count * 100 ) # add the overall probability of stopping as a column stop_breaks &lt;- stop_prob %&gt;% select(group, id_player, stop_overall) %&gt;% full_join(stop_prob_outcome, by = c(&quot;group&quot;, &quot;id_player&quot;)) %&gt;% select(group, id_player, outcome, total_count, stop_count, stop_prob, stop_overall) # save the data frame as a csv file write_csv(stop_breaks, &quot;../../data/processed/stop_breaks.csv&quot;) # remove data frame(s) remove(stop_breaks, stop_prob, stop_prob_outcome) 3.3 Stake change Players can change their stakes between rounds. We explore whether the probability of changing stakes is influenced by prior outcome, and the change in stake amount as a function of prior outcome. 3.3.1 stake_change.csv Players can choose among 10 different levels of stake sizes (from 0.25 euro to 20 euro). Since we are interested in whether wins and losses may change the betting behavior, we exclude the first round of each session (i.e., these rounds have no prior outcomes). For the remaining data, we calculate the number of rounds that follow a win or a loss, and the probability of changing stakes. We also calculate the average change in stakes (in euro; a positive change score indicates increasing stake, while a negative change score indicates decreasing stake). Since players can only select one from ten levels of stakes, as a second measure of stake change, we transform the stake amounts into stake levels, with 1 being the lowest level of stake (0.25 euro) and 10 being the highest level of stake (20 euro). A change score is then calculated based on the levels (rather than the stake amounts) of stakes. We calculate the average change in stake sizes and stake levels both for all rounds, and only on rounds where players did change stakes. The following variables are calculated and saved in the stake_change.csv file. group: the group to which a player belongs, High-Risk or Low-Risk. id_player: the anonymous id of a player. prev_outcome: the outcome on the previous round, win (win amount &gt; 0) or loss (win amount = 0). n_round: the total number of rounds following a win or a loss. n_round_change: the number of rounds where a player changed the stake. stake_change_prop: the proportion of rounds where players changed the stake (%). stake_change_size_overall: the average change in stake sizes in all rounds. A positive value indicates an increase in stake (euro). stake_change_level_overall: the average change in stake levels in all rounds. A positive value indicates an increase in stake level. stake_change_size: the average change in stake sizes when players did change the stake. In other words, rounds where players did not change the stake are excluded. stake_change_level: the average change in stake levels when players did change the stake. In other words, rounds where players did not change the stake are excluded. # get all the unique levels of bet sizes bet_sizes &lt;- unique(d$stake) bet_sizes &lt;- sort(bet_sizes, decreasing = F) stake_change &lt;- d %&gt;% mutate( # determine if the previous round is a win or a loss prev_outcome = ifelse(prev_win &gt; 0, &quot;win&quot;, &quot;loss&quot;), # create a new variable for stake level stake_level = factor(stake, levels = bet_sizes), stake_level = as.numeric(stake_level), # create a new variable for the previous stake prev_stake_level = lag(stake_level), # calculate the change in stakes between two rounds # a positive value indicates an increase in stake stake_change_size = stake - prev_stake, # do the same for the change in stake level stake_change_level = stake_level - prev_stake_level ) %&gt;% filter(!is.na(prev_outcome)) %&gt;% ungroup() # calculate the probability of changing stakes and the average change # in stake sizes and stake levels with all rounds included stake_change_prop &lt;- stake_change %&gt;% group_by(group, id_player, prev_outcome) %&gt;% summarize( # the total number of rounds across all sessions n_round = n(), # the total number of rounds when stakes did change n_round_change = sum(stake_change_size != 0), # probability of changing stakes stake_change_prop = mean(stake_change_size != 0) * 100, # the overall change in stake sizes and levels stake_change_size_overall = mean(stake_change_size), stake_change_level_overall = mean(stake_change_level) ) %&gt;% ungroup() # calculate the changes in stakes when players did change stakes stake_change_sizes &lt;- stake_change %&gt;% # only include rounds where players did change stakes filter(stake_change_size != 0) %&gt;% group_by(group, id_player, prev_outcome) %&gt;% summarize( stake_change_size = mean(stake_change_size), stake_change_level = mean(stake_change_level), ) %&gt;% ungroup() # combine both data frames stake_change_combined &lt;- stake_change_prop %&gt;% full_join(stake_change_sizes, by = c(&quot;group&quot;, &quot;id_player&quot;, &quot;prev_outcome&quot;)) # save the data frame as a csv file write_csv(stake_change_combined, &quot;../../data/processed/stake_change.csv&quot;) remove(stake_change, stake_change_prop, stake_change_sizes, stake_change_combined) 3.4 Speed of play Next we examine the speed of play, once players have decided to continue playing. For this analysis, we focus on the RT of putting in the first column as an indicator of the speed of play. For this analysis, we further exclude rounds where the RT of putting in the first column was at least 5000 milliseconds. RTs below 0 (potentially a recording error) are also excluded. 3.4.1 rt.csv # number of rounds before exclusion before &lt;- nrow(d) d_after &lt;- d %&gt;% mutate(rt = rt1) %&gt;% filter( # exclude the first round of each session id_round != 1, # only keep trials where the RT of putting in the first column # is between 0 and 5000 milliseconds rt &lt; 5000, rt &gt;= 0 ) # calculate number of rounds after the exclusion after &lt;- nrow(d_after) # calculate the proportion of data exclusion removed &lt;- (before - after)/before * 100 Players in total played 10370013 rounds. 160524 rounds were excluded after applying the exclusion criteria as listed above (1.5% of all rounds). For the remaining rounds, we calculate the number of rounds, and the mean RTs following wins and losses respectively. Since players differed in how quickly they generally responded, to control for the potential effects of general responding speeds, we further calculate the z score of each RT within each player. The mean RT z scores are further calculated for each player. The processed data are saved in the rt.csv file. The following variables are included. group: the group to which a player belongs, High-Risk or Low-Risk. id_player: the anonymous id of a player. prev_outcome: the outcome on the previous trial, win (win amount &gt; 0) or loss (win amount = 0). n_round: the number of rounds following a win or a loss. rt_mean: the mean response time (of putting in the first column) after a win or a loss, in milliseconds. rt_z_mean: the mean of response time z score (of putting in the first column) after a win or a loss. rt_data &lt;- d_after %&gt;% # calculate the following variables for each player group_by(group, id_player) %&gt;% mutate( # standardize the RT data within each player rt_z = scale(rt), # determine whether a previous round is a win or a loss prev_outcome = ifelse(prev_win &gt; 0, &quot;win&quot;, &quot;loss&quot;) ) %&gt;% # for rounds following wins and losses, calculate the total round number # and the mean RTs (raw scores as well as z scores) group_by(group, id_player, prev_outcome) %&gt;% summarize( n_round = n(), # number of rounds rt_mean = mean(rt), # the mean rt rt_z_mean = mean(rt_z) # the mean rt z score ) # save the data frame as a csv file write_csv(rt_data, &quot;../../data/processed/rt.csv&quot;) remove(d_after, rt_data, d) "],["descriptives.html", "Chapter 4 Descriptives 4.1 Player characteristics 4.2 Play behavior characteristics 4.3 All in one table", " Chapter 4 Descriptives In this part, we provide some descriptive information of both the players and their general play behavior in the game. demo &lt;- read_csv(&quot;../../data/processed/descriptive_data.csv&quot;) bets_count &lt;- read_csv(&quot;../../data/processed/bets_count.csv&quot;) 4.1 Player characteristics 4.1.1 Age and gender First, we calculated the number of players (males and females) and the descriptive information of age in each group (see Table 4.1). We further made an age by gender pyramid for each group (see Figure 4.1). # the total number of players; both groups combined n_total &lt;- nrow(demo) # the number of players in the high-risk and the low-risk group n_HR &lt;- sum(demo$group == &quot;High-Risk&quot;) n_LR &lt;- sum(demo$group == &quot;Low-Risk&quot;) # count the number of males and females in each group gender_count &lt;- demo %&gt;% count(group, gender) %&gt;% pivot_wider(id_cols = group, names_from = gender, values_from = n) %&gt;% mutate(Total = Female + Male) # calculate the descriptive information of age in each group age_des &lt;- demo %&gt;% group_by(group) %&gt;% summarize(across(age, list(mean = mean, median = median, sd = sd, min = min, max = max))) %&gt;% mutate(age_mean = round(age_mean, 1), age_sd = round(age_sd, 1)) # combine gender count and age descriptive demo_summary &lt;- gender_count %&gt;% inner_join(age_des, by = &quot;group&quot;) # show table kable(demo_summary, caption = &quot;Demographic information&quot;, booktabs = T, align = &quot;c&quot;) Table 4.1: Demographic information group Female Male Total age_mean age_median age_sd age_min age_max High-Risk 800 1003 1803 40.2 38 10.9 22 89 Low-Risk 409 501 910 37.7 34 12.7 22 85 # age pyramids for both groups age_count &lt;- demo %&gt;% mutate( # in the sample age ranges from 22 to 89. # divide players into age groups from 20-90, with bin width of 5 years. age_range = cut(age, breaks = seq(20, 90, 5)) ) %&gt;% # count the number of males and females in each age group count(group, age_range, gender) %&gt;% mutate(group = factor(group, levels = c(&quot;High-Risk&quot;, &quot;Low-Risk&quot;), labels = c(&quot;High-Involvement&quot;, &quot;Low-Involvement&quot;))) age_pyramids &lt;- ggplot(age_count, aes(age_range, n, fill=gender)) + # plot bars for males geom_col(data=filter(age_count, gender ==&quot;Male&quot;)) + # add the counts next to the bars geom_text(data=filter(age_count, gender ==&quot;Male&quot;), aes(x=age_range, y = n, label = n), nudge_y = 20) + # plot bars for females, but flip it to the other side geom_col(data=filter(age_count, gender==&quot;Female&quot;), aes(y = n*(-1))) + # add the counts next to the bars geom_text(data=filter(age_count, gender ==&quot;Female&quot;), aes(x=age_range, y = n*(-1), label = n), nudge_y = -20) + # for high-risk and low-risk group separately facet_wrap(~group) + # use colorblind-friendly color scale_fill_manual(values = color_values) + scale_color_manual(values = color_values) + labs(x = &quot;Age Range (years old)&quot;, y = &quot;Number of Players&quot;, fill = &quot;Gender&quot;) + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;) + # adjust the tick labels on the y axis scale_y_continuous(limits = c(-240, 240), breaks=seq(-240,240,40), labels=abs(seq(-240,240,40))) + # flip the x and y axis coord_flip() age_pyramids Figure 4.1: Age by gender pyramids for the high-risk and the low-risk group. # save plots ggsave(&quot;figure/age_pyramid.pdf&quot;, age_pyramids, width = 8, height = 6) 4.1.2 Risk levels All players in the low-risk group have a risk level of 0. Players in the high-risk group, however, may have more than one risk level (3, 4, or 5). This is because the risk level a certain player received is determined by the amount of risk indicators they exhibited. The more risk indicators a player exhibited, the higher the risk level was. Since players’ behavior can vary over time, the risk level a particular player receives can also vary. We therefore made a Venn diagram to show the number of players with each risk level(s) in the high-risk group (Figure 4.2). # get the player ids for each risk level risk_level_3 &lt;- demo %&gt;% filter(risk_3 == 1) %&gt;% .$id_player %&gt;% unique risk_level_4 &lt;- demo %&gt;% filter(risk_4 == 1) %&gt;% .$id_player %&gt;% unique risk_level_5 &lt;- demo %&gt;% filter(risk_5 == 1) %&gt;% .$id_player %&gt;% unique # draw a Venn diagram, code from https://www.r-graph-gallery.com/14-venn-diagramm.html # Chart VennDiagram::venn.diagram( x = list(risk_level_3, risk_level_4, risk_level_5), category.names = c(&quot;Level 3&quot; , &quot;Level 4&quot; , &quot;Level 5&quot;), filename = &#39;figure/risk_levels.png&#39;, output=TRUE, # Output features imagetype=&quot;png&quot; , height = 480 , width = 480 , resolution = 300, compression = &quot;lzw&quot;, # Circles lwd = 1, col=c(&quot;#440154ff&quot;, &#39;#21908dff&#39;, &#39;#fde725ff&#39;), fill = c(alpha(&quot;#440154ff&quot;, 0.3), alpha(&#39;#21908dff&#39;, 0.3), alpha(&#39;#fde725ff&#39;, 0.3)), # Numbers cex = .6, fontface = &quot;bold&quot;, fontfamily = &quot;sans&quot;, # Set names cat.cex = 0.6, cat.fontface = &quot;plain&quot;, cat.default.pos = &quot;outer&quot;, cat.pos = c(-27, 27, 135), cat.dist = c(0.055, 0.055, 0.085), cat.fontfamily = &quot;sans&quot;, rotation = 1 ) ## [1] 1 # include image in the graphics include_graphics(&#39;figure/risk_levels.png&#39;) Figure 4.2: Venn diagram for the risk levels of players in the high-risk group. The overlapping regions of the circles indicate the numbers of players with corresponding two or three risk levels. The non-overlapping regions of the circles indicate the numbers of players with one risk level. 4.2 Play behavior characteristics 4.2.1 Number of sessions and rounds To provide some descriptive information, we plot the total number of sessions and rounds played by each player. # count the number of players with certain number of sessions players_with_certain_sessions &lt;- demo %&gt;% # divide the total number of sessions into bins # note that the scale is transformed so that larger values are compressed mutate(n_session_bin = cut(n_session, breaks = c(0:10, (2:10)*10, (2:10)*100, (2:5)*1000)), n_session_label = cut(n_session, breaks = c(0:10, (2:10)*10, (2:10)*100, (2:5)*1000), labels = 1:32) ) %&gt;% # count the number of players with certain numbers of sessions count(group, n_session_bin, n_session_label) %&gt;% mutate( group = factor(group, levels = c(&quot;High-Risk&quot;, &quot;Low-Risk&quot;), labels = c(&quot;High-Involvement&quot;, &quot;Low-Involvement&quot;)), n_session_label = as.numeric(n_session_label) ) # make a histogram for the total number of sessions session_hist &lt;- players_with_certain_sessions %&gt;% ggplot(aes(n_session_label, n, fill = group, color = group)) + geom_bar(stat = &quot;identity&quot;, alpha = 0.4, position = &quot;identity&quot;) + scale_x_continuous(breaks = 0:32 + 0.5, # note that +0.5 to move the bars horizontally labels = c(0:10, (2:10)*10, (2:10)*100, (2:5)*1000), limits = c(0, 34)) + scale_y_continuous(breaks = (0:9) * 50, labels = (0:9) * 50, limits = c(0, 450)) + labs(x = &quot;Number of Sessions&quot;, y = &quot;Number of Players&quot;, fill = &quot;Group&quot;, color = &quot;Group&quot;) + # use colorblind-friendly color scale_fill_manual(values = color_values) + scale_color_manual(values = color_values) + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;, panel.grid.minor = element_blank(), axis.text.x=element_text(angle = -90, vjust = 0.5)) # count the number of players with certain number of rounds players_with_certain_rounds &lt;- demo %&gt;% # divide the total number of sessions into bins # note that the scale is transformed so that larger values are compressed mutate(n_round_bin = cut(n_round_total, breaks = c(0:10, (2:10)*10, (2:10)*100, (2:5)*1000) * 100), n_round_label = cut(n_round_total, breaks = c(0:10, (2:10)*10, (2:10)*100, (2:5)*1000) * 100, labels = 1:32) ) %&gt;% # count the number of players with certain numbers of sessions count(group, n_round_bin, n_round_label) %&gt;% mutate( group = factor(group, levels = c(&quot;High-Risk&quot;, &quot;Low-Risk&quot;), labels = c(&quot;High-Involvement&quot;, &quot;Low-Involvement&quot;)), n_round_label = as.numeric(n_round_label) ) # make a histogram for the total number of rounds round_hist &lt;- players_with_certain_rounds %&gt;% ggplot(aes(n_round_label, n, fill = group, color = group)) + geom_bar(stat = &quot;identity&quot;, alpha = 0.4, position = &quot;identity&quot;) + scale_x_continuous(breaks = 0:32 + 0.5, # note that +0.5 to move the bars horizontally labels = c(0:10, (2:10)*10, (2:10)*100, (2:5)*1000) * 100, limits = c(0, 34)) + scale_y_continuous(breaks = (0:11) * 50, labels = (0:11) * 50, limits = c(0, 550)) + labs(x = &quot;Number of Rounds&quot;, y = &quot;Number of Players&quot;, fill = &quot;Group&quot;, color = &quot;Group&quot;) + # use colorblind-friendly color scale_fill_manual(values = color_values) + scale_color_manual(values = color_values) + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;, panel.grid.minor = element_blank(), axis.text.x=element_text(angle = -90, vjust = 0.5)) # save two plots in one figure p &lt;- ggarrange(session_hist, round_hist, ncol = 1, common.legend = TRUE, legend=&quot;top&quot;) p Figure 4.3: Histograms of the numbers of players who played certain numbers of sessions (top) or certain numbers of rounds (bottom). ggsave(&quot;figure/total_session_round.png&quot;, p, width = 7, height = 7) For each player, we calculate the total number of sessions played, the total number of rounds played, the mean number of rounds played per session, and the median number of rounds played per session. We then compare the numbers of sessions and rounds between the two groups. As can be seen from Table 4.2, players in the high-risk group overall played more sessions and rounds than those in the low-risk group. They also tended to have longer sessions (i.e., more rounds per session) than the low-risk group. # calculate the total numbers of sessions and rounds across all players n_session_total &lt;- sum(demo$n_session) n_round_total &lt;- sum(demo$n_round_total) # compare the two groups rounds_HR &lt;- demo %&gt;% filter(group == &quot;High-Risk&quot;) rounds_LR &lt;- demo %&gt;% filter(group == &quot;Low-Risk&quot;) session_comp &lt;- TES(rounds_HR$n_session, rounds_LR$n_session, paired = F, conf = 0.95) round_total_comp &lt;- TES(rounds_HR$n_round_total, rounds_LR$n_round_total, paired = F, conf = 0.95) round_mean_comp &lt;- TES(rounds_HR$n_round_mean, rounds_LR$n_round_mean, paired = F, conf = 0.95) round_median_comp &lt;- TES(rounds_HR$n_round_median, rounds_LR$n_round_median, paired = F, conf = 0.95) # combine and format the results count_comp &lt;- rbind(session_comp, round_total_comp, round_mean_comp, round_median_comp) %&gt;% mutate(comp = c(&quot;Session number&quot;, &quot;Round number&quot;, &quot;Mean round number&quot;, &quot;Median round number&quot;)) %&gt;% select(comp, everything()) comp_formatted &lt;- count_comp %&gt;% mutate( across(c(mean_x, sd_x, mean_y, sd_y, diff, lowerCI, upperCI), ~round(.x)), across(c(df, t, logBF), ~round(.x, digits = 1)), across(c(d, g), ~round(.x, digits = 3))) # show the table kable(comp_formatted, caption = &quot;Comparing numbers of sessions and rounds between the two groups&quot;, booktabs = T, align = &quot;c&quot;) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;100%&quot;) Table 4.2: Comparing numbers of sessions and rounds between the two groups comp mean_x sd_x mean_y sd_y diff lowerCI upperCI df t pt pw logBF BF d g Session number 64 163 6 12 59 51 66 1842.2 15.2 0 0 54.3 3.646574e+23 0.619 0.618 Round number 5590 13764 320 834 5271 4633 5909 1828.1 16.2 0 0 61.6 5.537903e+26 0.659 0.659 Mean round number 82 78 51 63 31 25 36 2195.6 11.0 0 0 48.7 1.445875e+21 0.449 0.449 Median round number 61 65 46 60 15 10 20 1963.6 5.8 0 0 12.9 4.080801e+05 0.238 0.238 4.2.2 Bet sizes In each round, players can choose from 10 different stake sizes (from 0.25 euro till 20.00 euro). For each player, we count how often they selected each bet size, and calculated the relative proportion of each bet size being chosen. Figure 4.4 shows the betting patterns of both groups as heatmaps. Players were more likely to choose a small bet size rather than a large bet size, and this tendency is more pronounced in the low-risk group than in the high-risk group. # get the ten unique stake amounts that players could choose, # and order them from the lowest (0.25) to the highest (20). bet_sizes &lt;- unique(bets_count$stake) bet_sizes &lt;- sort(bet_sizes, decreasing = FALSE) # retrieve the median stake amount for each player, # we will use the median stake amount to order the players within each group. bets &lt;- demo %&gt;% select(id_player, bet_median) # add the median stake amount to the data bets_count &lt;- bets_count %&gt;% full_join(bets, by = &quot;id_player&quot;) %&gt;% arrange(group, bet_median) %&gt;% mutate( # number players from 1 in each group, for the purpose of plotting id = c(rep(1:n_HR, each = 10), rep(1:n_LR, each = 10)), # turn the variable stake into a factor stake = factor(stake, levels = bet_sizes) ) # make a heatmap for the betting patterns of all players bets_heatmap &lt;- ggplot(bets_count, aes(stake, id, fill = prop)) + geom_tile() + scale_fill_gradient(low = &quot;white&quot;, high = &quot;black&quot;) + facet_wrap(~group, scales = &quot;free_y&quot;) + labs(fill = &quot;Proportion&quot;, x = &quot;Bet (euro)&quot;) + theme( # remove player ids on the y axis axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; ) bets_heatmap Figure 4.4: Heatmaps of betting patterns of all players. ggsave(&quot;figure/bets_heatmap.pdf&quot;, bets_heatmap, width = 5, height = 8) For each player, we calculate their (1) maximum bet size, (2) minimum bet size, (3) mean bet size, and (4) median bet size across all rounds. The high-risk group is then compared against the low-risk group on all four parameters. For all four parameters, the high-risk group bet more than the low-risk group (Table 4.3). # compare the high-risk and the low-risk group bets_HR &lt;- filter(demo, group == &quot;High-Risk&quot;) bets_LR &lt;- filter(demo, group == &quot;Low-Risk&quot;) bet_max_comp &lt;- TES(bets_HR$bet_max, bets_LR$bet_max, paired = F, conf = 0.95) bet_min_comp &lt;- TES(bets_HR$bet_min, bets_LR$bet_min, paired = F, conf = 0.95) bet_mean_comp &lt;- TES(bets_HR$bet_mean, bets_LR$bet_mean, paired = F, conf = 0.95) bet_median_comp &lt;- TES(bets_HR$bet_median, bets_LR$bet_median, paired = F, conf = 0.95) bet_comp &lt;- rbind(bet_max_comp, bet_min_comp, bet_mean_comp, bet_median_comp) %&gt;% mutate(comp = c(&quot;Maximum stake&quot;, &quot;Minimum stake&quot;, &quot;Mean stake&quot;, &quot;Median stake&quot;)) %&gt;% select(comp, everything()) comp_formatted &lt;- bet_comp %&gt;% mutate( across(c(mean_x, sd_x, mean_y, sd_y, diff, lowerCI, upperCI), ~round(.x, digits = 2)), across(c(df, t, logBF), ~round(.x, digits = 1)), across(c(d, g), ~round(.x, digits = 3))) # make a table kable(comp_formatted, caption = &quot;Comparing the maximum, minimum, mean and median bet size between two groups&quot;, booktabs = T, align = &quot;c&quot;) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;100%&quot;) Table 4.3: Comparing the maximum, minimum, mean and median bet size between two groups comp mean_x sd_x mean_y sd_y diff lowerCI upperCI df t pt pw logBF BF d g Maximum stake 6.40 6.97 1.61 2.87 4.79 4.42 5.16 2627.2 25.2 0 0.0000000 180.8 3.157163e+78 1.026 1.026 Minimum stake 0.71 1.77 0.45 0.55 0.26 0.17 0.35 2384.0 5.7 0 0.4845876 6.1 4.346473e+02 0.231 0.231 Mean stake 2.22 3.19 0.74 0.95 1.48 1.32 1.64 2344.2 18.2 0 0.0000000 87.0 6.027380e+37 0.739 0.738 Median stake 1.95 3.33 0.68 0.92 1.27 1.10 1.43 2283.0 15.1 0 0.0000000 58.8 3.408144e+25 0.614 0.613 4.2.3 Wins For each player, we calculate the probability of winning, and the maximum, minimum, mean and median amounts of wins on rounds where players won (the win amount is what the players received minus the stake they wagered on each round). These parameters are then compared between the two groups. Table 4.4 shows that players in the high-risk group tended to have a higher probability of winning, and their winning amounts tended to be larger than those for the low-risk group. # compare the high-risk group and the low-risk group wins_HR &lt;- filter(demo, group == &quot;High-Risk&quot;) wins_LR &lt;- filter(demo, group == &quot;Low-Risk&quot;) win_prob_comp &lt;- TES(wins_HR$win_prob, wins_LR$win_prob, paired = F, conf = .95) # remove NAs as some players might not have wins in the data wins_HR &lt;- filter(wins_HR, !is.na(win_max)) wins_LR &lt;- filter(wins_LR, !is.na(win_max)) win_max_comp &lt;- TES(wins_HR$win_max, wins_LR$win_max, paired = F, conf = .95) win_min_comp &lt;- TES(wins_HR$win_min, wins_LR$win_min, paired = F, conf = .95) win_mean_comp &lt;- TES(wins_HR$win_mean, wins_LR$win_mean, paired = F, conf = .95) win_median_comp &lt;- TES(wins_HR$win_median, wins_LR$win_median, paired = F, conf = .95) win_prob_comp &lt;- win_prob_comp %&gt;% mutate(comp = &quot;Win probability&quot;) %&gt;% select(comp, everything()) win_max_comp &lt;- win_max_comp %&gt;% mutate(comp = &quot;Maximum win&quot;) %&gt;% select(comp, everything()) win_min_comp &lt;- win_min_comp %&gt;% mutate(comp = &quot;Minimum win&quot;) %&gt;% select(comp, everything()) win_mean_comp &lt;- win_mean_comp %&gt;% mutate(comp = &quot;Mean win&quot;) %&gt;% select(comp, everything()) win_median_comp &lt;- win_median_comp %&gt;% mutate(comp = &quot;Median win&quot;) %&gt;% select(comp, everything()) win_comp &lt;- rbind(win_prob_comp, win_max_comp, win_min_comp, win_mean_comp, win_median_comp) comp_formatted &lt;- win_comp %&gt;% mutate( across(c(mean_x, sd_x, mean_y, sd_y, diff, lowerCI, upperCI), ~round(.x, digits = 2)), across(c(df, t, logBF), ~round(.x, digits = 1)), across(c(d, g), ~round(.x, digits = 3))) # make a table kable(comp_formatted, caption = &quot;Comparing the probability and amount of wins between two groups.&quot;, booktabs = T, align = &quot;c&quot;) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;100%&quot;) Table 4.4: Comparing the probability and amount of wins between two groups. comp mean_x sd_x mean_y sd_y diff lowerCI upperCI df t pt pw logBF BF d g Win probability 21.81 4.77 18.68 8.38 3.13 2.54 3.71 1214.3 10.4 0 0.0000000 70.8 5.729340e+30 0.424 0.424 Maximum win 279.44 488.13 24.49 62.78 254.95 231.85 278.05 1899.6 21.6 0 0.0000000 104.5 2.474316e+45 0.909 0.909 Minimum win 0.85 2.12 0.50 0.62 0.34 0.24 0.45 2318.8 6.3 0 0.0604872 7.5 1.755268e+03 0.265 0.265 Mean win 6.25 10.04 1.77 2.73 4.48 3.98 4.98 2262.4 17.5 0 0.0000000 74.3 1.887871e+32 0.734 0.734 Median win 2.95 5.00 1.02 1.34 1.93 1.68 2.18 2248.0 15.2 0 0.0000000 55.4 1.130820e+24 0.637 0.637 4.2.4 Losses On rounds where players lost, we calculate the loss (equivalent to the stake). For each player, we calculate (1) the maximum loss, (2) the minimum loss, (3) the mean loss, and (4) the median loss. # compare the high-risk group and the low-risk group losses_HR &lt;- filter(demo, group == &quot;High-Risk&quot;) losses_LR &lt;- filter(demo, group == &quot;Low-Risk&quot;) # remove NAs as some players might not have losses in the data losses_HR &lt;- filter(losses_HR, !is.na(loss_max)) losses_LR &lt;- filter(losses_LR, !is.na(loss_max)) loss_max_comp &lt;- TES(losses_HR$loss_max, losses_LR$loss_max, paired = F, conf = .95) loss_min_comp &lt;- TES(losses_HR$loss_min, losses_LR$loss_min, paired = F, conf = .95) loss_mean_comp &lt;- TES(losses_HR$loss_mean, losses_LR$loss_mean, paired = F, conf = .95) loss_median_comp &lt;- TES(losses_HR$loss_median, losses_LR$loss_median, paired = F, conf = .95) loss_max_comp &lt;- loss_max_comp %&gt;% mutate(comp = &quot;Maximum loss&quot;) %&gt;% select(comp, everything()) loss_min_comp &lt;- loss_min_comp %&gt;% mutate(comp = &quot;Minimum loss&quot;) %&gt;% select(comp, everything()) loss_mean_comp &lt;- loss_mean_comp %&gt;% mutate(comp = &quot;Mean loss&quot;) %&gt;% select(comp, everything()) loss_median_comp &lt;- loss_median_comp %&gt;% mutate(comp = &quot;Median loss&quot;) %&gt;% select(comp, everything()) loss_comp &lt;- rbind(loss_max_comp, loss_min_comp, loss_mean_comp, loss_median_comp) comp_formatted &lt;- loss_comp %&gt;% mutate( across(c(mean_x, sd_x, mean_y, sd_y, diff, lowerCI, upperCI), ~round(.x, digits = 2)), across(c(df, t, logBF), ~round(.x, digits = 1)), across(c(d, g), ~round(.x, digits = 3))) # make a table kable(comp_formatted, caption = &quot;Comparing the amount of losses between two groups.&quot;, booktabs = T, align = &quot;c&quot;) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;100%&quot;) Table 4.5: Comparing the amount of losses between two groups. comp mean_x sd_x mean_y sd_y diff lowerCI upperCI df t pt pw logBF BF d g Maximum loss 6.40 6.97 1.61 2.87 4.79 4.42 5.16 2627.6 25.2 0 0.0000000 180.6 2.725657e+78 1.027 1.026 Minimum loss 0.71 1.77 0.45 0.55 0.26 0.17 0.35 2386.0 5.7 0 0.4672055 6.1 4.540425e+02 0.232 0.232 Mean loss 2.22 3.19 0.74 0.95 1.48 1.32 1.64 2345.8 18.2 0 0.0000000 86.9 5.458115e+37 0.739 0.738 Median loss 1.94 3.32 0.67 0.85 1.27 1.10 1.43 2222.7 15.3 0 0.0000000 59.2 5.277684e+25 0.621 0.620 4.2.5 Total spent # compare the high-risk group and the low-risk group total_spent_HR &lt;- filter(demo, group == &quot;High-Risk&quot;) total_spent_LR &lt;- filter(demo, group == &quot;Low-Risk&quot;) total_spent_comp &lt;- TES(total_spent_HR$total_spent, total_spent_LR$total_spent, paired = F, conf = .95) total_spent_comp &lt;- total_spent_comp %&gt;% mutate(comp = &quot;Total spent&quot;) %&gt;% select(comp, everything()) comp_formatted &lt;- total_spent_comp %&gt;% mutate( across(c(mean_x, sd_x, mean_y, sd_y, diff, lowerCI, upperCI), ~round(.x, digits = 2)), across(c(df, t, logBF), ~round(.x, digits = 1)), across(c(d, g), ~round(.x, digits = 3))) # make a table kable(comp_formatted, caption = &quot;Comparing the total amount of money spent between two groups.&quot;, booktabs = T, align = &quot;c&quot;) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;100%&quot;) (#tab:total spent - compare)Comparing the total amount of money spent between two groups. comp mean_x sd_x mean_y sd_y diff lowerCI upperCI df t pt pw logBF BF d g Total spent 520.06 2687.34 38.66 152.52 481.4 356.88 605.92 1824.9 7.6 0 0 11.3 82965.73 0.308 0.308 4.3 All in one table Present all information in one table. # in the manuscript, we present all information in one table # here we combine the separate tables into one one_table &lt;- rbind(count_comp, bet_comp, win_comp, loss_comp, total_spent_comp) # for brevity, we do not report results on maximum and minimum one_table &lt;- one_table %&gt;% filter(!comp %in% c(&quot;Maximum stake&quot;, &quot;Minimum stake&quot;, &quot;Maximum win&quot;, &quot;Minimum win&quot;, &quot;Maximum loss&quot;, &quot;Minimum loss&quot;)) # correct the p values for multiple comparisons one_table$p &lt;- p.adjust(one_table$pt, method = &quot;holm&quot;) # do some formatting one_table &lt;- one_table %&gt;% mutate( # rename comp into Parameter Parameter = comp, # for these variables, keep 1 digit after the decimal point across(c(mean_x:t, logBF), ~round(.x, digits = 1)), # for effect size g, keep 3 digits after the decimal point g = round(g, digits = 3), # report p values below .001 as &lt; .001 p = ifelse(p &lt; .001, &quot;&lt;.001&quot;, sprintf(&quot;%.3f&quot;, round(p, digits = 3))), # combine mean and standard deviation for each group `High-Risk` = paste0(mean_x, &quot; (&quot;, sd_x, &quot;)&quot;), `Low-Risk` = paste0(mean_y, &quot; (&quot;, sd_y, &quot;)&quot;) ) %&gt;% # delete some redundant variables select(-c(comp:sd_y), -pt, -pw, -d, -BF) %&gt;% select(Parameter, `High-Risk`, `Low-Risk`, diff, lowerCI, upperCI, df, t, p, logBF, g) # show the table kable(one_table, caption = &quot;Comparing characteristics of play behavior between the two groups.&quot;, booktabs = T, align = &quot;c&quot;) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;100%&quot;) Table 4.6: Comparing characteristics of play behavior between the two groups. Parameter High-Risk Low-Risk diff lowerCI upperCI df t p logBF g Session number 64.2 (162.8) 5.6 (12.2) 58.6 51.1 66.2 1842.2 15.2 &lt;.001 54.3 0.618 Round number 5590.3 (13764) 319.5 (833.7) 5270.7 4632.6 5908.8 1828.1 16.2 &lt;.001 61.6 0.659 Mean round number 82.1 (78.3) 51.3 (63.3) 30.8 25.4 36.3 2195.6 11.0 &lt;.001 48.7 0.449 Median round number 60.6 (65.4) 45.9 (60.2) 14.8 9.8 19.7 1963.6 5.8 &lt;.001 12.9 0.238 Mean stake 2.2 (3.2) 0.7 (0.9) 1.5 1.3 1.6 2344.2 18.2 &lt;.001 87.0 0.738 Median stake 1.9 (3.3) 0.7 (0.9) 1.3 1.1 1.4 2283.0 15.1 &lt;.001 58.8 0.613 Win probability 21.8 (4.8) 18.7 (8.4) 3.1 2.5 3.7 1214.3 10.4 &lt;.001 70.8 0.424 Mean win 6.2 (10) 1.8 (2.7) 4.5 4.0 5.0 2262.4 17.5 &lt;.001 74.3 0.734 Median win 3 (5) 1 (1.3) 1.9 1.7 2.2 2248.0 15.2 &lt;.001 55.4 0.637 Mean loss 2.2 (3.2) 0.7 (0.9) 1.5 1.3 1.6 2345.8 18.2 &lt;.001 86.9 0.738 Median loss 1.9 (3.3) 0.7 (0.8) 1.3 1.1 1.4 2222.7 15.3 &lt;.001 59.2 0.620 Total spent 520.1 (2687.3) 38.7 (152.5) 481.4 356.9 605.9 1824.9 7.6 &lt;.001 11.3 0.308 # show the table in latex code # kable(one_table, &quot;latex&quot;, # caption = &quot;Comparing characteristics of play behavior between the two groups.&quot;, # booktabs = T, align = &quot;l&quot;) %&gt;% # kable_styling(latex_options = &quot;scale_down&quot;) "],["when-to-stop-1.html", "Chapter 5 When to stop 5.1 Main analysis 5.2 With breaks", " Chapter 5 When to stop # load data stop &lt;- read_csv(&quot;../../data/processed/stop.csv&quot;) stop_breaks &lt;- read_csv(&quot;../../data/processed/stop_breaks.csv&quot;) 5.1 Main analysis In this section, we analyze when players decided to stop. For this analysis, players need to have 5 wins and 5 losses (all sessions combined) to be included in the analysis. The table below shows the number of players and rounds left in this analysis. # players need to have at least 5 wins and 5 losses players_incldue &lt;- stop %&gt;% filter(total_count &gt;= 5) %&gt;% pivot_wider( id_cols = c(group, id_player), names_from = outcome, values_from = stop_prob ) %&gt;% drop_na() %&gt;% .$id_player stop &lt;- stop %&gt;% filter(id_player %in% players_incldue) stop_breaks &lt;- stop_breaks %&gt;% filter(id_player %in% players_incldue) # calculate the remaining number of players and rounds count &lt;- stop %&gt;% group_by(group, id_player) %&gt;% summarize(nrounds = sum(total_count)) %&gt;% group_by(group) %&gt;% summarize( player = n(), round = mean(nrounds), sd = sd(nrounds), min = min(nrounds), max = max(nrounds) ) kable(count, caption = &quot;Number of players and rounds left&quot;) %&gt;% kable_styling() (#tab:stop - data preparation)Number of players and rounds left group player round sd min max High-Risk 1679 6001.9244 14176.8387 12 200706 Low-Risk 651 440.8909 959.2639 13 13114 5.1.1 Plot For the remaining players, we first plot the probabilities of ending a session after a win versus after a loss. stop_summary &lt;- stop %&gt;% group_by(group) %&gt;% group_modify(~Rmisc::summarySEwithin(.x, measurevar = &quot;stop_prob&quot;, idvar = &quot;id_player&quot;, withinvars = &quot;outcome&quot;)) %&gt;% mutate( outcome = factor(outcome, levels = c(&quot;loss&quot;, &quot;win&quot;)), group = factor(group, levels = c(&quot;High-Risk&quot;, &quot;Low-Risk&quot;), labels = c(&quot;High-Involvement&quot;, &quot;Low-Involvement&quot;)) ) # plot the probabilities of stopping a session after a win vs. a loss stop_plot &lt;- ggplot(stop_summary, aes(outcome, stop_prob, color = group, shape = group)) + geom_point(position = position_dodge(width = dodge_width), size = shape_size) + geom_line(aes(group = group, linetype = group), position = position_dodge(width = dodge_width)) + geom_errorbar(aes(ymin = stop_prob-ci, ymax = stop_prob+ci), width = 0.2, position = position_dodge(width = dodge_width)) + # use colorblind-friendly color scale_color_manual(values=color_values) + scale_x_discrete(labels=c(&quot;loss&quot; = &quot;Loss&quot;, &quot;win&quot; = &quot;Win&quot;)) + labs(x = &quot;Previous outcome&quot;, y = &quot;Probability of ending a session (%)&quot;, color = &quot;Group&quot;, shape = &quot;Group&quot;, linetype = &quot;Group&quot;) + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;) stop_plot (#fig:stop plot)Probability of ending a session after a win and a loss. Error bars stand for 95% within-subject confidence intervals. ggsave(&quot;figure/stop.pdf&quot;, stop_plot, width = 3.5, height = 3.5) The high-involvement players overall had a lower probability of ending a session, as they tended to have longer sessions on average. To control for this overall between-group difference in the stopping probability, we divided the probability of stopping after a win or after a loss by the overall probability of stopping for each player. stop &lt;- stop %&gt;% mutate(stop_prob_relative = stop_prob/stop_overall) stop_summary &lt;- stop %&gt;% group_by(group) %&gt;% group_modify(~Rmisc::summarySEwithin(.x, measurevar = &quot;stop_prob_relative&quot;, idvar = &quot;id_player&quot;, withinvars = &quot;outcome&quot;)) %&gt;% mutate(outcome = factor(outcome, levels = c(&quot;loss&quot;, &quot;win&quot;)), group = factor(group, levels = c(&quot;High-Risk&quot;, &quot;Low-Risk&quot;), labels = c(&quot;High-Involvement&quot;, &quot;Low-Involvement&quot;))) # plot winning probabilities stop_plot &lt;- ggplot(stop_summary, aes(outcome, stop_prob_relative, color = group, shape = group)) + geom_point(position = position_dodge(width = dodge_width), size = shape_size) + geom_line(aes(group = group, linetype = group), position = position_dodge(width = dodge_width)) + geom_errorbar(aes(ymin = stop_prob_relative-ci, ymax = stop_prob_relative+ci), width = 0.2, position = position_dodge(width = dodge_width)) + # use colorblind-friendly color scale_color_manual(values=color_values) + scale_x_discrete(labels=c(&quot;loss&quot; = &quot;Loss&quot;, &quot;win&quot; = &quot;Win&quot;)) + labs(x = &quot;Previous outcome&quot;, y = &quot;Relative likelihood of ending a session&quot;, color = &quot;Group&quot;, shape = &quot;Group&quot;, linetype = &quot;Group&quot;) + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;) stop_plot (#fig:stop controlled plot)Probability of ending a session after a win and a loss, controlling for the overall probability of stopping. Error bars stand for 95% within-subject confidence intervals. # this will be the main figure included in the paper stop_plot_main &lt;- stop_plot ggsave(&quot;figure/stop_relative.pdf&quot;, stop_plot, width = 4, height = 4) 5.1.2 ANOVA The stopping probabilities are analyzed with a mixed ANOVA, with the previous outcome (loss vs. win, within subjects) and the involvement level (high vs. low, between subjects) as independent variables. we conduct the analysis for both the raw probabilities of stopping, and the relative likelihood of stopping after taking the overall probability of stopping into account. # run an ANOVA stop_anova &lt;- aov_ez(id = &quot;id_player&quot; , dv = &quot;stop_prob&quot; , within = &quot;outcome&quot; , between = &quot;group&quot; , data = stop) stop_anova &lt;- nice(stop_anova) # do a bit formatting stop_anova &lt;- stop_anova %&gt;% mutate( Effect = c(&quot;Involvement Level&quot;, &quot;Outcome&quot;, &quot;Interaction&quot;), # remove asterisks from the F values `F` = str_remove_all(`F`, &quot;[*]&quot;), # remove white spaces `F` = str_trim(`F`) ) %&gt;% rename(p = &quot;p.value&quot;) kable(stop_anova, caption = &quot;When do players decide to stop?&quot;, booktabs = T, align = &quot;l&quot;) (#tab:stop anova analysis)When do players decide to stop? Effect df MSE F ges p Involvement Level 1, 2328 4.02 55.29 .012 &lt;.001 Outcome 1, 2328 4.01 1098.91 .191 &lt;.001 Interaction 1, 2328 4.01 5.56 .001 .019 # run an ANOVA stop_anova &lt;- aov_ez(id = &quot;id_player&quot; , dv = &quot;stop_prob_relative&quot; , within = &quot;outcome&quot; , between = &quot;group&quot; , data = stop) stop_anova &lt;- nice(stop_anova) # do a bit formatting stop_anova &lt;- stop_anova %&gt;% mutate( Effect = c(&quot;Involvement Level&quot;, &quot;Outcome&quot;, &quot;Interaction&quot;), # remove asterisks from the F values `F` = str_remove_all(`F`, &quot;[*]&quot;), # remove whitespace `F` = str_trim(`F`) ) %&gt;% rename(p = &quot;p.value&quot;) kable(stop_anova, caption = &quot;When do players decide to stop? (Controlling for the overall probability of stopping)&quot;, booktabs = T, align = &quot;l&quot;) (#tab:relative stop anova analysis)When do players decide to stop? (Controlling for the overall probability of stopping) Effect df MSE F ges p Involvement Level 1, 2328 0.09 5.36 &lt;.001 .021 Outcome 1, 2328 0.29 3353.74 .520 &lt;.001 Interaction 1, 2328 0.29 8.95 .003 .003 5.1.3 Pairwise comparisons Next we conduct a series of pairwise comparisons. First, we examine the effects within groups, by comparing the probability of stopping after a loss vs. that after a win, for each group separately. Next we examine the effects between groups, by calculating a difference score for each player (stopping after a loss - stopping after a win) and compare the difference scores between two groups. P values are corrected for multiple comparisons using the Holm-Bonferroni method. # for pairwise comparisons, we need the data in the wide format stop_wide &lt;- stop %&gt;% pivot_wider(id_cols = c(group, id_player), names_from = outcome, values_from = stop_prob) %&gt;% # calculate a difference score mutate(diff = loss - win) # within-group comparisons # first, compare the effect within each group comp_within &lt;- stop_wide %&gt;% group_by(group) %&gt;% group_modify(~TES(.x$loss, .x$win, paired = TRUE)) %&gt;% mutate(d = dz, g = gav) %&gt;% ungroup() %&gt;% select(-group, -dz, -gav, -dav) # between group comparisons comp_between1 &lt;- TES(filter(stop_wide, group == &quot;High-Risk&quot;)$loss, filter(stop_wide, group == &quot;Low-Risk&quot;)$loss, paired = FALSE) comp_between2 &lt;- TES(filter(stop_wide, group == &quot;High-Risk&quot;)$win, filter(stop_wide, group == &quot;Low-Risk&quot;)$win, paired = FALSE) comp_between3 &lt;- TES(filter(stop_wide, group == &quot;High-Risk&quot;)$diff, filter(stop_wide, group == &quot;Low-Risk&quot;)$diff, paired = FALSE) comp_between &lt;- bind_rows(comp_between1, comp_between2, comp_between3) # combine and correct p values for multiple comparisons comp &lt;- bind_rows(comp_within, comp_between) %&gt;% mutate( Comparison = c(&quot;High-Loss vs. High-Win&quot;, &quot;Low-Loss vs. Low-Win&quot;, &quot;High-Loss vs. Low-Loss&quot;, &quot;High-Win vs. Low-Win&quot;, &quot;(High-Loss - High-Win) vs. (Low-Loss - Low-Win)&quot;), pt = p.adjust(pt, method = &quot;holm&quot;) ) # do some formatting comp &lt;- comp %&gt;% mutate( across(mean_x:upperCI, ~round(.x, digits = 2)), across(c(d, g), ~round(.x, digits = 3)), t = round(t, digits = 1), df = round(df, digits = 1), p = ifelse(pt &lt; .001, &quot;&lt;.001&quot;, sprintf(&quot;%.3f&quot;, round(pt, digits = 3))), logBF = round(logBF, digits = 2) ) %&gt;% select(Comparison, mean_x:t, p, logBF, g) # show the table kable(comp, caption = &quot;Pairwise comparisons on when to stop&quot;, booktabs = T, align = &quot;l&quot;) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;100%&quot;) (#tab:stop pairwise t tests)Pairwise comparisons on when to stop Comparison mean_x sd_x mean_y sd_y diff lowerCI upperCI df t p logBF g High-Loss vs. High-Win 2.35 2.24 0.34 1.33 2.01 1.89 2.14 1678.0 32.0 &lt;.001 396.17 1.128 Low-Loss vs. Low-Win 2.99 2.40 0.67 2.35 2.32 2.06 2.58 650.0 17.4 &lt;.001 120.54 0.977 High-Loss vs. Low-Loss 2.35 2.24 2.99 2.40 -0.64 -0.85 -0.43 1113.4 -5.9 &lt;.001 15.22 0.272 High-Win vs. Low-Win 0.34 1.33 0.67 2.35 -0.33 -0.52 -0.14 816.2 -3.4 0.001 6.19 0.157 (High-Loss - High-Win) vs. (Low-Loss - Low-Win) 2.01 2.57 2.32 3.40 -0.31 -0.60 -0.02 951.9 -2.1 0.037 -0.21 0.096 Repeat the pairwise comparisons, but this time accounting for the overall probability of stopping. # for pairwise comparisons, we need the data in the wide format stop_wide &lt;- stop %&gt;% pivot_wider(id_cols = c(group, id_player), names_from = outcome, values_from = stop_prob_relative) %&gt;% # calculate a difference score mutate(diff = loss - win) # within-group comparisons # first, compare the effect within each group comp_within &lt;- stop_wide %&gt;% group_by(group) %&gt;% group_modify(~TES(.x$loss, .x$win, paired = TRUE)) %&gt;% mutate(d = dz, g = gav) %&gt;% ungroup() %&gt;% select(-group, -dz, -gav, -dav) # between group comparisons comp_between1 &lt;- TES(filter(stop_wide, group == &quot;High-Risk&quot;)$loss, filter(stop_wide, group == &quot;Low-Risk&quot;)$loss, paired = FALSE) comp_between2 &lt;- TES(filter(stop_wide, group == &quot;High-Risk&quot;)$win, filter(stop_wide, group == &quot;Low-Risk&quot;)$win, paired = FALSE) comp_between3 &lt;- TES(filter(stop_wide, group == &quot;High-Risk&quot;)$diff, filter(stop_wide, group == &quot;Low-Risk&quot;)$diff, paired = FALSE) comp_between &lt;- bind_rows(comp_between1, comp_between2, comp_between3) # combine and correct p values for multiple comparisons comp &lt;- bind_rows(comp_within, comp_between) %&gt;% mutate( Comparison = c(&quot;High-Loss vs. High-Win&quot;, &quot;Low-Loss vs. Low-Win&quot;, &quot;High-Loss vs. Low-Loss&quot;, &quot;High-Win vs. Low-Win&quot;, &quot;(High-Loss - High-Win) vs. (Low-Loss - Low-Win)&quot;), pt = p.adjust(pt, method = &quot;holm&quot;) ) # do some formatting comp &lt;- comp %&gt;% mutate( across(mean_x:upperCI, ~round(.x, digits = 2)), across(c(d, g), ~round(.x, digits = 3)), t = round(t, digits = 1), df = round(df, digits = 1), p = ifelse(pt &lt; .001, &quot;&lt;.001&quot;, sprintf(&quot;%.3f&quot;, round(pt, digits = 3))), logBF = round(logBF, digits = 2) ) %&gt;% select(Comparison, mean_x:t, p, logBF, g) # show the table kable(comp, caption = &quot;Pairwise comparisons on when to stop&quot;, booktabs = T, align = &quot;l&quot;) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;100%&quot;) (#tab:relative stop pairwise t tests)Pairwise comparisons on when to stop Comparison mean_x sd_x mean_y sd_y diff lowerCI upperCI df t p logBF g High-Loss vs. High-Win 1.24 0.15 0.17 0.49 1.07 1.04 1.10 1678.0 68.5 &lt;.001 1115.02 3.297 Low-Loss vs. Low-Win 1.21 0.22 0.25 0.79 0.96 0.88 1.04 650.0 24.4 &lt;.001 207.52 1.884 High-Loss vs. Low-Loss 1.24 0.15 1.21 0.22 0.03 0.01 0.05 898.1 3.0 0.007 3.33 0.140 High-Win vs. Low-Win 0.17 0.49 0.25 0.79 -0.08 -0.14 -0.01 850.1 -2.3 0.027 0.83 0.105 (High-Loss - High-Win) vs. (Low-Loss - Low-Win) 1.07 0.64 0.96 1.01 0.10 0.02 0.19 860.4 2.5 0.027 1.47 0.114 5.2 With breaks Here we repeat the analysis above (controlling for the overall probability of stopping), while also taking breaks in play into account. 5.2.1 Plot stop_breaks &lt;- stop_breaks %&gt;% mutate(stop_prob_relative = stop_prob/stop_overall) stop_summary &lt;- stop_breaks %&gt;% group_by(group) %&gt;% group_modify(~Rmisc::summarySEwithin(.x, measurevar = &quot;stop_prob_relative&quot;, idvar = &quot;id_player&quot;, withinvars = &quot;outcome&quot;)) %&gt;% mutate( outcome = factor(outcome, levels = c(&quot;loss&quot;, &quot;win&quot;)), group = factor(group, levels = c(&quot;High-Risk&quot;, &quot;Low-Risk&quot;), labels = c(&quot;High-Involvement&quot;, &quot;Low-Involvement&quot;)) ) # plot winning probabilities stop_plot &lt;- ggplot(stop_summary, aes(outcome, stop_prob_relative, color = group, shape = group)) + geom_point(position = position_dodge(width = dodge_width), size = shape_size) + geom_line(aes(group = group, linetype = group), position = position_dodge(width = dodge_width)) + geom_errorbar(aes(ymin = stop_prob_relative-ci, ymax = stop_prob_relative+ci), width = 0.2, position = position_dodge(width = dodge_width)) + # use colorblind-friendly color scale_color_manual(values=color_values) + scale_x_discrete(labels=c(&quot;loss&quot; = &quot;Loss&quot;, &quot;win&quot; = &quot;Win&quot;)) + labs(x = &quot;Previous outcome&quot;, y = &quot;Relative likelihood of stopping&quot;, color = &quot;Group&quot;, shape = &quot;Group&quot;, linetype = &quot;Group&quot;) + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;) stop_plot (#fig:stop controlled plot with breaks)Probability of ending a session after a win and a loss, controlling for the overall probability of stopping. Error bars stand for 95% within-subject confidence intervals. ggsave(&quot;figure/stop_breaks.pdf&quot;, stop_plot, width = 4, height = 4) 5.2.2 ANOVA # run an ANOVA stop_anova &lt;- aov_ez(id = &quot;id_player&quot; , dv = &quot;stop_prob_relative&quot; , within = &quot;outcome&quot; , between = &quot;group&quot; , data = stop_breaks) stop_anova &lt;- nice(stop_anova) # do a bit formatting stop_anova &lt;- stop_anova %&gt;% mutate( Effect = c(&quot;Involvement Level&quot;, &quot;Outcome&quot;, &quot;Interaction&quot;), # remove asterisks from the F values `F` = str_remove_all(`F`, &quot;[*]&quot;), # remove whitespace `F` = str_trim(`F`) ) %&gt;% rename(p = &quot;p.value&quot;) kable(stop_anova, caption = &quot;When do players decide to stop?&quot;, booktabs = T, align = &quot;l&quot;) (#tab:relative stop anova analysis with breaks)When do players decide to stop? Effect df MSE F ges p Involvement Level 1, 2328 0.09 3.69 + &lt;.001 .055 Outcome 1, 2328 0.29 3259.61 .513 &lt;.001 Interaction 1, 2328 0.29 6.75 .002 .009 5.2.3 Pairwise comparisons # for pairwise comparisons, we need the data in the wide format stop_wide &lt;- stop_breaks %&gt;% pivot_wider(id_cols = c(group, id_player), names_from = outcome, values_from = stop_prob_relative) %&gt;% # calculate a difference score mutate(diff = loss - win) # within-group comparisons # first, compare the effect within each group comp_within &lt;- stop_wide %&gt;% group_by(group) %&gt;% group_modify(~TES(.x$loss, .x$win, paired = TRUE)) %&gt;% mutate(d = dz, g = gav) %&gt;% ungroup() %&gt;% select(-group, -dz, -gav, -dav) # between group comparisons comp_between1 &lt;- TES(filter(stop_wide, group == &quot;High-Risk&quot;)$loss, filter(stop_wide, group == &quot;Low-Risk&quot;)$loss, paired = FALSE) comp_between2 &lt;- TES(filter(stop_wide, group == &quot;High-Risk&quot;)$win, filter(stop_wide, group == &quot;Low-Risk&quot;)$win, paired = FALSE) comp_between3 &lt;- TES(filter(stop_wide, group == &quot;High-Risk&quot;)$diff, filter(stop_wide, group == &quot;Low-Risk&quot;)$diff, paired = FALSE) comp_between &lt;- bind_rows(comp_between1, comp_between2, comp_between3) # combine and correct p values for multiple comparisons comp &lt;- bind_rows(comp_within, comp_between) %&gt;% mutate( Comparison = c(&quot;High-Loss vs. High-Win&quot;, &quot;Low-Loss vs. Low-Win&quot;, &quot;High-Loss vs. Low-Loss&quot;, &quot;High-Win vs. Low-Win&quot;, &quot;(High-Loss - High-Win) vs. (Low-Loss - Low-Win)&quot;), pt = p.adjust(pt, method = &quot;holm&quot;) ) # do some formatting comp &lt;- comp %&gt;% mutate( across(mean_x:upperCI, ~round(.x, digits = 2)), across(c(d, g), ~round(.x, digits = 3)), t = round(t, digits = 1), df = round(df, digits = 1), p = ifelse(pt &lt; .001, &quot;&lt;.001&quot;, sprintf(&quot;%.3f&quot;, round(pt, digits = 3))), logBF = round(logBF, digits = 2) ) %&gt;% select(Comparison, mean_x:t, p, logBF, g) # show the table kable(comp, caption = &quot;Pairwise comparisons on when to stop&quot;, booktabs = T, align = &quot;l&quot;) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;100%&quot;) (#tab:relative stop with breaks pairwise t tests)Pairwise comparisons on when to stop Comparison mean_x sd_x mean_y sd_y diff lowerCI upperCI df t p logBF g High-Loss vs. High-Win 1.24 0.15 0.19 0.49 1.04 1.01 1.07 1678.0 66.8 &lt;.001 1083.78 3.215 Low-Loss vs. Low-Win 1.21 0.22 0.26 0.79 0.95 0.88 1.03 650.0 24.4 &lt;.001 206.85 1.880 High-Loss vs. Low-Loss 1.24 0.15 1.21 0.22 0.03 0.01 0.04 901.0 2.7 0.019 2.13 0.126 High-Win vs. Low-Win 0.19 0.49 0.26 0.79 -0.06 -0.13 0.00 855.2 -1.9 0.063 -0.18 0.090 (High-Loss - High-Win) vs. (Low-Loss - Low-Win) 1.04 0.64 0.95 1.00 0.09 0.01 0.17 865.2 2.2 0.063 0.39 0.100 "],["change-in-stake.html", "Chapter 6 Change in stake 6.1 Plot 6.2 ANOVAs 6.3 Pairwise comparisons", " Chapter 6 Change in stake stake_change &lt;- read_csv(&quot;../../data/processed/stake_change.csv&quot;) In this section, we analyze change in stake after a win and a loss. For this analysis, players need to have at least 5 rounds following a win and 5 rounds following a loss to be included. The table below shows the number of players and rounds left in this analysis. # only participants with at least 5 rounds following wins and losses # are included in the plot and following analyses players_incldue &lt;- stake_change %&gt;% filter(n_round &gt;= 5) %&gt;% pivot_wider( id_cols = c(group, id_player), names_from = prev_outcome, values_from = stake_change_prop ) %&gt;% drop_na() %&gt;% .$id_player stake_change &lt;- filter(stake_change, id_player %in% players_incldue) # calculate the remaining number of players and rounds count &lt;- stake_change %&gt;% group_by(group, id_player) %&gt;% summarize(total_count = sum(n_round)) %&gt;% group_by(group) %&gt;% summarize( player = n(), round = mean(total_count), sd = sd(total_count), min = min(total_count), max = max(total_count) ) kable(count, caption = &quot;Number of players and rounds left&quot;) (#tab:stake change - data preparation)Number of players and rounds left group player round sd min max High-Risk 1678 5936.5876 14046.5123 11 197613 Low-Risk 648 435.4954 949.0014 13 12959 6.1 Plot For each player, we calculate (1) the probability (%) of changing stake after a win and a loss; (2) the average change in stake amount (euro) after a win and a loss. Since players can only choose from 10 amount levels, as a second metric of stake change, we convert stake amount into stake level (with 1 being the lowest stake level, i.e., 0.25 euro, and 10 being the highest stake level, i.e., 20.00 euro) and conduct the same analysis on the change in stake level. # plot the probability of changing stake after a win and a loss stake_change_prob_summary &lt;- stake_change %&gt;% group_by(group) %&gt;% group_modify(~Rmisc::summarySEwithin(.x, measurevar = &quot;stake_change_prop&quot;, idvar = &quot;id_player&quot;, withinvars = &quot;prev_outcome&quot;)) %&gt;% mutate( prev_outcome = factor(prev_outcome, levels = c(&quot;loss&quot;, &quot;win&quot;)), group = factor(group, levels = c(&quot;High-Risk&quot;, &quot;Low-Risk&quot;), labels = c(&quot;High-Involvement&quot;, &quot;Low-Involvement&quot;)) ) stake_change_prob_plot &lt;- ggplot(stake_change_prob_summary, aes(prev_outcome, stake_change_prop, color = group, shape = group)) + geom_point(position = position_dodge(width = dodge_width), size = shape_size) + geom_line(aes(group = group, linetype = group), position = position_dodge(width = dodge_width)) + geom_errorbar(aes(ymin = stake_change_prop-ci, ymax = stake_change_prop+ci), width =0.2, position = position_dodge(width = dodge_width)) + # use colorblind-friendly color scale_color_manual(values = color_values) + scale_x_discrete(labels=c(&quot;loss&quot; = &quot;Loss&quot;, &quot;win&quot; = &quot;Win&quot;)) + labs(x = &quot;Previous outcome&quot;, y = &quot;Probability of changing stake (%)&quot;, color = &quot;Group&quot;, shape = &quot;Group&quot;, linetype = &quot;Group&quot;) + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;) # the mean change in stake size (euro) after a win and a loss stake_change_size_summary &lt;- stake_change %&gt;% # use euro cents instead of euros as the unit mutate(stake_change_size_overall = stake_change_size_overall * 100) %&gt;% group_by(group) %&gt;% group_modify(~Rmisc::summarySEwithin(.x, measurevar = &quot;stake_change_size_overall&quot;, idvar = &quot;id_player&quot;, withinvars = &quot;prev_outcome&quot;)) %&gt;% ungroup() %&gt;% mutate( group = factor(group, levels = c(&quot;High-Risk&quot;, &quot;Low-Risk&quot;), labels = c(&quot;High-Involvement&quot;, &quot;Low-Involvement&quot;))) stake_change_size_plot &lt;- stake_change_size_summary %&gt;% ggplot(aes(prev_outcome, stake_change_size_overall, color = group, shape = group)) + geom_point(position = position_dodge(width = dodge_width), size = shape_size) + geom_line(aes(group = group, linetype = group), position = position_dodge(width = dodge_width)) + geom_errorbar(aes(ymin = stake_change_size_overall-ci, ymax = stake_change_size_overall+ci), width =0.2, position = position_dodge(width = dodge_width)) + # use colorblind-friendly color scale_color_manual(values = color_values) + scale_x_discrete(labels=c(&quot;loss&quot; = &quot;Loss&quot;, &quot;win&quot; = &quot;Win&quot;)) + labs(x = &quot;Previous outcome&quot;, y = &quot;Change in stake size (euro cents)&quot;, color = &quot;Group&quot;, shape = &quot;Group&quot;, linetype = &quot;Group&quot;) + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;) # the mean change in stake level after a win and a loss stake_change_level_summary &lt;- stake_change %&gt;% mutate(stake_change_level_overall = stake_change_level_overall * 100) %&gt;% group_by(group) %&gt;% group_modify(~Rmisc::summarySEwithin(.x, measurevar = &quot;stake_change_level_overall&quot;, idvar = &quot;id_player&quot;, withinvars = &quot;prev_outcome&quot;)) %&gt;% mutate(group = factor(group, levels = c(&quot;High-Risk&quot;, &quot;Low-Risk&quot;), labels = c(&quot;High-Involvement&quot;, &quot;Low-Involvement&quot;))) stake_change_level_plot &lt;- stake_change_level_summary %&gt;% ggplot(aes(prev_outcome, stake_change_level_overall, color = group, shape = group)) + geom_point(position = position_dodge(width = dodge_width), size = shape_size) + geom_line(aes(group = group, linetype = group), position = position_dodge(width = dodge_width)) + geom_errorbar(aes(ymin = stake_change_level_overall-ci, ymax = stake_change_level_overall+ci), width =0.2, position = position_dodge(width = dodge_width)) + # use colorblind-friendly color scale_color_manual(values = color_values) + scale_x_discrete(labels=c(&quot;loss&quot; = &quot;Loss&quot;, &quot;win&quot; = &quot;Win&quot;)) + labs(x = &quot;Previous outcome&quot;, y = &quot;Change in stake level (*100)&quot;, color = &quot;Group&quot;, shape = &quot;Group&quot;, linetype = &quot;Group&quot;) + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;) ggsave(&quot;figure/stake_level_change.pdf&quot;, stake_change_level_plot, width = 4, height = 4) # combine three plots stake_change_plot &lt;- ggarrange(stake_change_prob_plot, stake_change_size_plot, stake_change_level_plot, nrow = 1, common.legend = TRUE, legend=&quot;top&quot;) stake_change_plot Figure 6.1: The probability of changing stake (left), the average change in stake amount (euro; middle) and the average change in stake level (right) after a win and a loss for both groups. Error bars stand for 95% within-subject confidence intervals. ggsave(&quot;figure/stake_change.pdf&quot;, stake_change_plot, width = 9, height = 3.5) 6.2 ANOVAs We conduct three ANOVAs for the three dependent variables, using prior game outcome (loss vs. win, within subjects) and involvement level (high vs. low, between subjects) as independent variables. # for the change in stake amount, use euro cent instead of euro as the unit # similarly multiply the change in stake level by 100 in the analysis stake_change &lt;- stake_change %&gt;% mutate( stake_change_size_overall = stake_change_size_overall * 100, stake_change_level_overall = stake_change_level_overall * 100 ) # run ANOVAs stake_change_prob_anova &lt;- aov_ez(id = &quot;id_player&quot; , dv = &quot;stake_change_prop&quot; , data = stake_change , between = &quot;group&quot; , within = &quot;prev_outcome&quot;) stake_change_prob_anova &lt;- nice(stake_change_prob_anova) stake_change_size_anova &lt;- aov_ez(id = &quot;id_player&quot; , dv = &quot;stake_change_size_overall&quot; , data = stake_change , between = &quot;group&quot; , within = &quot;prev_outcome&quot;) stake_change_size_anova &lt;- nice(stake_change_size_anova) stake_change_level_anova &lt;- aov_ez(id = &quot;id_player&quot; , dv = &quot;stake_change_level_overall&quot; , data = stake_change , between = &quot;group&quot; , within = &quot;prev_outcome&quot;) stake_change_level_anova &lt;- nice(stake_change_level_anova) # combine all anova tables and do some formatting change_anova_table &lt;- bind_rows( stake_change_prob_anova, stake_change_size_anova, stake_change_level_anova ) %&gt;% mutate( Parameter = rep(c(&quot;Prob of change (%)&quot;, &quot;Change in amount (euro)&quot;, &quot;Change in level&quot;), each = 3), Effect = rep(c(&quot;Risk Level&quot;, &quot;Prior Outcome&quot;, &quot;Interaction&quot;), 3), # remove asterisks from the F values `F` = str_remove_all(`F`, &quot;[*]&quot;), # remove white space `F` = str_trim(`F`), p = `p.value` ) %&gt;% select(Parameter, Effect, df, MSE, `F`, ges, p) # show the table kable(change_anova_table, caption = &quot;Effects of group and prior outcome on change in stake&quot;, booktabs = T, align = &quot;l&quot;) %&gt;% collapse_rows(columns = 1) %&gt;% kable_styling(latex_options = &quot;scale_down&quot;) Table 6.1: Effects of group and prior outcome on change in stake Parameter Effect df MSE F ges p Prob of change (%) Risk Level 1, 2324 17.85 1.57 &lt;.001 .210 Prob of change (%) Prior Outcome 1, 2324 6.35 141.80 .016 &lt;.001 Prob of change (%) Interaction 1, 2324 6.35 1.95 &lt;.001 .163 Change in amount (euro) Risk Level 1, 2324 11.23 1.30 &lt;.001 .255 Change in amount (euro) Prior Outcome 1, 2324 24.22 14.21 .004 &lt;.001 Change in amount (euro) Interaction 1, 2324 24.22 0.03 &lt;.001 .858 Change in level Risk Level 1, 2324 6.38 0.00 &lt;.001 .973 Change in level Prior Outcome 1, 2324 15.78 72.12 .022 &lt;.001 Change in level Interaction 1, 2324 15.78 1.58 &lt;.001 .208 # # show the table in latex code # kable(change_anova_table, &quot;latex&quot;, # caption = &quot;Effects of group and prior outcome on change in stake&quot;, # booktabs = T, align = &quot;l&quot;) %&gt;% # collapse_rows(columns = 1) %&gt;% # kable_styling(latex_options = &quot;scale_down&quot;) 6.3 Pairwise comparisons Next we conduct a series of pairwise comparisons for each of the three dependent variables. We first compare the effect of prior outcome on the probability of changing stake within each group (two comparisons). We then compare the probability of changing stake after a loss between two groups, and the probability of changing stake after a win between two groups. We further calculate a difference score between loss and win for each player, and compare the difference scores between groups as well. The same comparisons are conducted for the change in stake amount and the change in stake level. In total we conduct 15 comparisons. P values are corrected for multiple comparisons using the Holm-Bonferroni method. #### Probability of changing stake #### # within group comparisons on prob of change stake_change_prob &lt;- stake_change %&gt;% pivot_wider(id_cols = c(group, id_player), names_from = prev_outcome, values_from = stake_change_prop) %&gt;% mutate(diff = loss - win) change_prob_within &lt;- stake_change_prob %&gt;% group_by(group) %&gt;% group_modify(~TES(.x$loss, .x$win, paired = TRUE)) %&gt;% mutate(d = dz, g = gav) %&gt;% ungroup() %&gt;% select(-group, -dz, -gav, -dav) # between group comparisons on prob of change change_prob_between1 &lt;- TES(filter(stake_change_prob, group == &quot;High-Risk&quot;)$loss, filter(stake_change_prob, group == &quot;Low-Risk&quot;)$loss, paired = FALSE) change_prob_between2 &lt;- TES(filter(stake_change_prob, group == &quot;High-Risk&quot;)$win, filter(stake_change_prob, group == &quot;Low-Risk&quot;)$win, paired = FALSE) change_prob_between3 &lt;- TES(filter(stake_change_prob, group == &quot;High-Risk&quot;)$diff, filter(stake_change_prob, group == &quot;Low-Risk&quot;)$diff, paired = FALSE) change_prob_between &lt;- bind_rows(change_prob_between1, change_prob_between2, change_prob_between3) # combine change_prob_comp &lt;- bind_rows(change_prob_within, change_prob_between) #### Change in stake size (euro cents) #### # within group comparisons on change in stake size (euro cents) stake_change_size &lt;- stake_change %&gt;% pivot_wider(id_cols = c(group, id_player), names_from = prev_outcome, values_from = stake_change_size_overall) %&gt;% mutate(diff = loss - win) change_size_within &lt;- stake_change_size %&gt;% group_by(group) %&gt;% group_modify(~TES(.x$loss, .x$win, paired = TRUE)) %&gt;% mutate(d = dz, g = gav) %&gt;% ungroup() %&gt;% select(-group, -dz, -gav, -dav) # between group comparisons on change in stake size (euro cents) stake_change_size &lt;- stake_change_size %&gt;% mutate(diff = loss - win) change_size_between1 &lt;- TES(filter(stake_change_size, group == &quot;High-Risk&quot;)$loss, filter(stake_change_size, group == &quot;Low-Risk&quot;)$loss, paired = FALSE) change_size_between2 &lt;- TES(filter(stake_change_size, group == &quot;High-Risk&quot;)$win, filter(stake_change_size, group == &quot;Low-Risk&quot;)$win, paired = FALSE) change_size_between3 &lt;- TES(filter(stake_change_size, group == &quot;High-Risk&quot;)$diff, filter(stake_change_size, group == &quot;Low-Risk&quot;)$diff, paired = FALSE) change_size_between &lt;- bind_rows(change_size_between1, change_size_between2, change_size_between3) # combine change_size_comp &lt;- bind_rows(change_size_within, change_size_between) #### Change in stake level #### # within group comparisons on change in stake level stake_change_level &lt;- stake_change %&gt;% pivot_wider(id_cols = c(group, id_player), names_from = prev_outcome, values_from = stake_change_level_overall) %&gt;% mutate(diff = loss - win) change_level_within &lt;- stake_change_level %&gt;% group_by(group) %&gt;% group_modify(~TES(.x$loss, .x$win, paired = TRUE)) %&gt;% mutate(d = dz, g = gav) %&gt;% ungroup() %&gt;% select(-group, -dz, -gav, -dav) # between group comparisons on change in stake level change_level_between1 &lt;- TES(filter(stake_change_level, group == &quot;High-Risk&quot;)$loss, filter(stake_change_level, group == &quot;Low-Risk&quot;)$loss, paired = FALSE) change_level_between2 &lt;- TES(filter(stake_change_level, group == &quot;High-Risk&quot;)$win, filter(stake_change_level, group == &quot;Low-Risk&quot;)$win, paired = FALSE) change_level_between3 &lt;- TES(filter(stake_change_level, group == &quot;High-Risk&quot;)$diff, filter(stake_change_level, group == &quot;Low-Risk&quot;)$diff, paired = FALSE) change_level_between &lt;- bind_rows(change_level_between1, change_level_between2, change_level_between3) # combine change_level_comp &lt;- bind_rows(change_level_within, change_level_between) #### Combine all comparisons #### # combine all results and correct p values for multiple comparisons comp &lt;- bind_rows(change_prob_comp, change_size_comp, change_level_comp) %&gt;% mutate( Parameter = rep(c(&quot;Prob of change (%)&quot;, &quot;Change in amount (euro)&quot;, &quot;Change in level&quot;), each = 5), Comparison = rep(c(&quot;Loss vs. Win (High-Risk)&quot;, &quot;Loss vs. Win (Low-Risk)&quot;, &quot;High- vs. Low-Risk (Loss)&quot;, &quot;High- vs. Low-Risk (Win)&quot;, &quot;High- vs. Low-Risk (Difference)&quot;), 3), pt = p.adjust(pt, method = &quot;holm&quot;) ) # do some formatting comp &lt;- comp %&gt;% mutate( diff = ifelse(Parameter == &quot;Prob of change (%)&quot;, sprintf(&quot;%.2f&quot;, round(diff, digits = 2)), sprintf(&quot;%.4f&quot;, round(diff, digits = 4))), lowerCI = ifelse(Parameter == &quot;Prob of change (%)&quot;, sprintf(&quot;%.2f&quot;, round(lowerCI, digits = 2)), sprintf(&quot;%.4f&quot;, round(lowerCI, digits = 4))), upperCI = ifelse(Parameter == &quot;Prob of change (%)&quot;, sprintf(&quot;%.2f&quot;, round(upperCI, digits = 2)), sprintf(&quot;%.4f&quot;, round(upperCI, digits = 4))), across(c(d, g), ~round(.x, digits = 3)), t = round(t, digits = 1), df = round(df, digits = 1), p = ifelse(pt &lt; .001, &quot;&lt;.001&quot;, sprintf(&quot;%.3f&quot;, round(pt, digits = 3))), logBF = round(logBF, digits = 2) ) %&gt;% select(Parameter, Comparison, diff:t, p, logBF, g) # show the table kable(comp, caption = &quot;Pairwise comparisons for effects on change in stake&quot;, booktabs = T, align = &quot;l&quot;) %&gt;% collapse_rows(columns = 1) %&gt;% kable_styling(latex_options = &quot;scale_down&quot;) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;100%&quot;) (#tab:change in stake pairwise comparisons)Pairwise comparisons for effects on change in stake Parameter Comparison diff lowerCI upperCI df t p logBF g Prob of change (%) Loss vs. Win (High-Risk) 1.10 0.92 1.27 1677.0 12.3 &lt;.001 68.96 0.311 Prob of change (%) Loss vs. Win (Low-Risk) 0.87 0.61 1.12 647.0 6.6 &lt;.001 17.83 0.264 Prob of change (%) High- vs. Low-Risk (Loss) -0.06 -0.34 0.23 1154.7 -0.4 1.000 -2.88 0.019 Prob of change (%) High- vs. Low-Risk (Win) -0.29 -0.61 0.04 1359.3 -1.7 0.726 -1.63 0.081 Prob of change (%) High- vs. Low-Risk (Difference) 0.23 -0.08 0.54 1273.0 1.4 1.000 -1.99 0.067 Change in amount (euro) Loss vs. Win (High-Risk) -0.6354 -0.9882 -0.2827 1677.0 -3.5 0.005 2.61 0.144 Change in amount (euro) Loss vs. Win (Low-Risk) -0.5780 -1.0230 -0.1330 647.0 -2.6 0.110 0.10 0.174 Change in amount (euro) High- vs. Low-Risk (Loss) 0.0961 -0.1660 0.3581 1770.6 0.7 1.000 -2.78 0.033 Change in amount (euro) High- vs. Low-Risk (Win) 0.1535 -0.2499 0.5569 1424.3 0.7 1.000 -2.73 0.035 Change in amount (euro) High- vs. Low-Risk (Difference) -0.0574 -0.6249 0.5101 1490.7 -0.2 1.000 -2.94 0.009 Change in level Loss vs. Win (High-Risk) -0.9397 -1.2093 -0.6702 1677.0 -6.8 &lt;.001 19.43 0.292 Change in level Loss vs. Win (Low-Risk) -1.2668 -1.6979 -0.8358 647.0 -5.8 &lt;.001 13.05 0.386 Change in level High- vs. Low-Risk (Loss) 0.1664 -0.0654 0.3982 1085.5 1.4 1.000 -1.89 0.065 Change in level High- vs. Low-Risk (Win) -0.1607 -0.5212 0.1997 1204.0 -0.9 1.000 -2.59 0.040 Change in level High- vs. Low-Risk (Difference) 0.3271 -0.1810 0.8352 1183.3 1.3 1.000 -2.17 0.058 # # show the table in latex code # kable(comp, &quot;latex&quot;, # caption = &quot;Pairwise comparisons for effects on change in stake&quot;, # booktabs = T, align = &quot;l&quot;) %&gt;% # collapse_rows(columns = 1) %&gt;% # kable_styling(latex_options = &quot;scale_down&quot;) "],["speed-of-play-1.html", "Chapter 7 Speed of play 7.1 Plot 7.2 ANOVAs 7.3 Pairwise comparisons 7.4 Combined plots", " Chapter 7 Speed of play rt &lt;- read_csv(&quot;../../data/processed/rt.csv&quot;) In this section, we analyze the speed of play after a win or a loss (i.e., from starting the current game till putting in the first column). We do not use the RT of starting a game, because in this data set, the ‘startRT’ is from putting in the last column in the previous game till starting the current game. The ‘startRT’ therefore includes the visual and auditory feedback players receive (which differs between winning and losing), as well as the time potentially spent on adjusting the stake for the current game. The RT of putting in the first column, on the other hand, is not influenced by these factors. Players need to have at least 5 rounds following a win and 5 rounds following a loss to be included. The table below shows the number of players and rounds left in this analysis. # only participants with at least 5 rounds following wins and losses # are included in the plot and following analyses players_incldue &lt;- rt %&gt;% filter(n_round &gt;= 5) %&gt;% pivot_wider( id_cols = c(group, id_player), names_from = prev_outcome, values_from = rt_mean ) %&gt;% drop_na() %&gt;% .$id_player rt &lt;- filter(rt, id_player %in% players_incldue) # calculate the remaining number of players and rounds count &lt;- rt %&gt;% group_by(group, id_player) %&gt;% summarize(total_count = sum(n_round)) %&gt;% group_by(group) %&gt;% summarize( player = n(), round = mean(total_count), sd = sd(total_count), min = min(total_count), max = max(total_count) ) kable(count, caption = &quot;Number of players and rounds left&quot;) (#tab:speed of play - data preparation)Number of players and rounds left group player round sd min max High-Risk 1678 5914.3558 13975.3005 11 196747 Low-Risk 646 433.3003 943.6577 16 12856 7.1 Plot # for each group, calculate the mean RT after winning and losing rt_summary &lt;- rt %&gt;% group_by(group) %&gt;% group_modify(~Rmisc::summarySEwithin(.x, measurevar = &quot;rt_mean&quot;, idvar = &quot;id_player&quot;, withinvars = &quot;prev_outcome&quot;)) %&gt;% mutate(group = factor(group, levels = c(&quot;High-Risk&quot;, &quot;Low-Risk&quot;), labels = c(&quot;High-Involvement&quot;, &quot;Low-Involvement&quot;))) # plot the results rt_plot &lt;- rt_summary %&gt;% ggplot(aes(prev_outcome, rt_mean, color = group, shape = group)) + geom_point(position = position_dodge(width = dodge_width), size = shape_size) + geom_line(aes(group = group, linetype = group), position = position_dodge(width = dodge_width)) + geom_errorbar(aes(ymin = rt_mean-ci, ymax = rt_mean+ci), width = 0.2, position = position_dodge(width = dodge_width)) + # use colorblind-friendly color scale_color_manual(values = color_values) + scale_x_discrete(labels=c(&quot;loss&quot; = &quot;Loss&quot;, &quot;win&quot; = &quot;Win&quot;)) + labs(x = &quot;Previous outcome&quot;, y = &quot;Response time (milliseconds)&quot;, color = &quot;Group&quot;, shape = &quot;Group&quot;, linetype = &quot;Group&quot;) ggsave(&quot;figure/raw_rt_plot.pdf&quot;, rt_plot, width = 4, height = 4) # for each group, calculate the mean RT z score after winning and losing rt_z_summary &lt;- rt %&gt;% group_by(group) %&gt;% group_modify(~Rmisc::summarySEwithin(.x, measurevar = &quot;rt_z_mean&quot;, idvar = &quot;id_player&quot;, withinvars = &quot;prev_outcome&quot;)) %&gt;% mutate(group = factor(group, levels = c(&quot;High-Risk&quot;, &quot;Low-Risk&quot;), labels = c(&quot;High-Involvement&quot;, &quot;Low-Involvement&quot;))) rt_z_plot &lt;- rt_z_summary %&gt;% ggplot(aes(prev_outcome, rt_z_mean, color = group, shape = group)) + geom_point(position = position_dodge(width = dodge_width), size = shape_size) + geom_line(aes(group = group, linetype = group), position = position_dodge(width = dodge_width)) + geom_errorbar(aes(ymin = rt_z_mean-ci, ymax = rt_z_mean+ci), width =0.2, position = position_dodge(width = dodge_width)) + # use colorblind-friendly color scale_color_manual(values = color_values) + scale_x_discrete(labels=c(&quot;loss&quot; = &quot;Loss&quot;, &quot;win&quot; = &quot;Win&quot;)) + labs(x = &quot;Previous outcome&quot;, y = &quot;Response time (z score)&quot;, color = &quot;Group&quot;, shape = &quot;Group&quot;, linetype = &quot;Group&quot;) # combine the two plots rt_combined_plot &lt;- ggarrange(rt_plot, rt_z_plot, nrow = 1, common.legend = TRUE, legend=&quot;top&quot;) rt_combined_plot Figure 7.1: Response time (left: raw RT; right: RT z scores) after a win and after a loss. ggsave(&quot;figure/rt.pdf&quot;, rt_combined_plot, width = 5, height = 3) 7.2 ANOVAs For both the raw RTs and RT z scores, we conduct a mixed ANOVA, with prior game outcome (loss vs. win, within subjects) and involvement level (high vs. low, between subjects) as independent variables. # run ANOVAs rt_anova &lt;- afex::aov_ez(id = &quot;id_player&quot; , dv = &quot;rt_mean&quot; , data = rt , between = &quot;group&quot; , within = &quot;prev_outcome&quot;) rt_anova &lt;- nice(rt_anova) rt_z_anova &lt;- afex::aov_ez(id = &quot;id_player&quot; , dv = &quot;rt_z_mean&quot; , data = rt , between = &quot;group&quot; , within = &quot;prev_outcome&quot;) rt_z_anova &lt;- nice(rt_z_anova) # combine anova tables and do some formatting rt_anova_table &lt;- bind_rows( rt_anova, rt_z_anova, ) %&gt;% mutate( Parameter = rep(c(&quot;RT (milliseconds)&quot;, &quot;RT (z scores)&quot;), each = 3), Effect = rep(c(&quot;Involvement Level&quot;, &quot;Prior Outcome&quot;, &quot;Interaction&quot;), 2), # remove asterisks from the F values `F` = str_remove_all(`F`, &quot;[*]&quot;), # remove whitespace `F` = str_trim(`F`), p = `p.value` ) %&gt;% select(Parameter, Effect, df, MSE, `F`, ges, p) # show the table kable(rt_anova_table, caption = &quot;Effects of group and prior outcome on speed of play&quot;, booktabs = T, align = &quot;l&quot;) %&gt;% collapse_rows(columns = 1) %&gt;% kable_styling(latex_options = &quot;scale_down&quot;) Table 7.1: Effects of group and prior outcome on speed of play Parameter Effect df MSE F ges p RT (milliseconds) Involvement Level 1, 2322 123081.68 275.54 .100 &lt;.001 RT (milliseconds) Prior Outcome 1, 2322 8066.72 1053.60 .027 &lt;.001 RT (milliseconds) Interaction 1, 2322 8066.72 47.47 .001 &lt;.001 RT (z scores) Involvement Level 1, 2322 0.02 15.22 .002 &lt;.001 RT (z scores) Prior Outcome 1, 2322 0.06 1483.85 .322 &lt;.001 RT (z scores) Interaction 1, 2322 0.06 12.55 .004 &lt;.001 # # show the table in latex code # kable(rt_anova_table, &quot;latex&quot;, # caption = &quot;Effects of group and prior outcome on speed of play&quot;, # booktabs = T, align = &quot;l&quot;) %&gt;% # collapse_rows(columns = 1) %&gt;% # kable_styling(latex_options = &quot;scale_down&quot;) 7.3 Pairwise comparisons We similarly conduct a series of within- and between-group pairwise comparisons. More specifically, we compare the effect of a loss vs. a win on the speed of play within each group. We then compare the speed of play after a loss, after a win and the difference in speed of play between loss and win, between the two groups. In total we have 10 comparisons - p values are again corrected for multiple comparisons using the Holm-Bonferroni method. #### Raw RTs #### # descriptive statistics rt_group &lt;- rt %&gt;% group_by(group) %&gt;% summarize( mean = mean(rt_mean), sd = sd(rt_mean) ) rt_outcome &lt;- rt %&gt;% group_by(prev_outcome) %&gt;% summarize( mean = mean(rt_mean), sd = sd(rt_mean) ) rt_all_cells &lt;- rt %&gt;% group_by(group, prev_outcome) %&gt;% summarize( mean = mean(rt_mean), sd = sd(rt_mean) ) # pairwise comparisons rt_wide &lt;- rt %&gt;% pivot_wider(id_cols = c(group, id_player), names_from = prev_outcome, values_from = rt_mean) %&gt;% mutate(diff = loss - win) # first, compare the effect of loss vs. win within each group rt_comp_within &lt;- rt_wide %&gt;% group_by(group) %&gt;% group_modify(~TES(.x$loss, .x$win, paired = TRUE)) %&gt;% mutate(d = dz, g = gav) %&gt;% ungroup() %&gt;% select(-group, -dz, -gav, -dav) # next, compare the two groups comp_between1 &lt;- TES(filter(rt_wide, group == &quot;High-Risk&quot;)$loss, filter(rt_wide, group == &quot;Low-Risk&quot;)$loss, paired = FALSE) comp_between2 &lt;- TES(filter(rt_wide, group == &quot;High-Risk&quot;)$win, filter(rt_wide, group == &quot;Low-Risk&quot;)$win, paired = FALSE) comp_between3 &lt;- TES(filter(rt_wide, group == &quot;High-Risk&quot;)$diff, filter(rt_wide, group == &quot;Low-Risk&quot;)$diff, paired = FALSE) rt_comp_between &lt;- bind_rows(comp_between1, comp_between2, comp_between3) #### RT z scores #### # descriptive statistics rt_z_group &lt;- rt %&gt;% group_by(group) %&gt;% summarize( mean = mean(rt_z_mean), sd = sd(rt_z_mean) ) rt_z_outcome &lt;- rt %&gt;% group_by(prev_outcome) %&gt;% summarize( mean = mean(rt_z_mean), sd = sd(rt_z_mean) ) rt_z_all_cells &lt;- rt %&gt;% group_by(group, prev_outcome) %&gt;% summarize( mean = mean(rt_z_mean), sd = sd(rt_z_mean) ) # pairwise comparisons rt_z_wide &lt;- rt %&gt;% pivot_wider(id_cols = c(group, id_player), names_from = prev_outcome, values_from = rt_z_mean) %&gt;% mutate(diff = loss - win) # first, compare the effect of loss vs. win within each group rt_z_comp_within &lt;- rt_z_wide %&gt;% group_by(group) %&gt;% group_modify(~TES(.x$loss, .x$win, paired = TRUE)) %&gt;% mutate(d = dz, g = gav) %&gt;% ungroup() %&gt;% select(-group, -dz, -gav, -dav) # next, compare the two groups comp_between1 &lt;- TES(filter(rt_z_wide, group == &quot;High-Risk&quot;)$loss, filter(rt_z_wide, group == &quot;Low-Risk&quot;)$loss, paired = FALSE) comp_between2 &lt;- TES(filter(rt_z_wide, group == &quot;High-Risk&quot;)$win, filter(rt_z_wide, group == &quot;Low-Risk&quot;)$win, paired = FALSE) comp_between3 &lt;- TES(filter(rt_z_wide, group == &quot;High-Risk&quot;)$diff, filter(rt_z_wide, group == &quot;Low-Risk&quot;)$diff, paired = FALSE) rt_z_comp_between &lt;- bind_rows(comp_between1, comp_between2, comp_between3) #### Combine all comparisons #### # combine all results and correct p values for multiple comparisons comp &lt;- bind_rows( rt_comp_within, rt_comp_between, rt_z_comp_within, rt_z_comp_between ) %&gt;% mutate( Parameter = rep(c(&quot;RT (milliseconds)&quot;, &quot;RT (z scores)&quot;), each = 5), Comparison = rep(c(&quot;Loss vs. Win (High-Risk)&quot;, &quot;Loss vs. Win (Low-Risk)&quot;, &quot;High- vs. Low-Risk (Loss)&quot;, &quot;High- vs. Low-Risk (Win)&quot;, &quot;High- vs. Low-Risk (Difference)&quot;), 2), pt = p.adjust(pt, method = &quot;holm&quot;) ) # do some formatting comp &lt;- comp %&gt;% mutate( diff = ifelse(Parameter == &quot;RT (milliseconds)&quot;, sprintf(&quot;%.1f&quot;, round(diff, digits = 1)), sprintf(&quot;%.3f&quot;, round(diff, digits = 3))), lowerCI = ifelse(Parameter == &quot;RT (milliseconds)&quot;, sprintf(&quot;%.1f&quot;, round(lowerCI, digits = 1)), sprintf(&quot;%.3f&quot;, round(lowerCI, digits = 3))), upperCI = ifelse(Parameter == &quot;RT (milliseconds)&quot;, sprintf(&quot;%.1f&quot;, round(upperCI, digits = 1)), sprintf(&quot;%.3f&quot;, round(upperCI, digits = 3))), across(c(d, g), ~round(.x, digits = 3)), t = round(t, digits = 1), df = round(df, digits = 1), p = ifelse(pt &lt; .001, &quot;&lt;.001&quot;, sprintf(&quot;%.3f&quot;, round(pt, digits = 3))), logBF = round(logBF, digits = 2) ) %&gt;% select(Parameter, Comparison, diff:t, p, logBF, g) # show the table kable(comp, caption = &quot;Pairwise comparisons for effects on speed of play&quot;, booktabs = T, align = &quot;l&quot;) %&gt;% collapse_rows(columns = 1) %&gt;% kable_styling(latex_options = &quot;scale_down&quot;) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;100%&quot;) (#tab:rt pairwise comparisons)Pairwise comparisons for effects on speed of play Parameter Comparison diff lowerCI upperCI df t p logBF g RT (milliseconds) Loss vs. Win (High-Risk) -75.2 -80.3 -70.1 1677.0 -28.9 &lt;.001 335.49 0.341 RT (milliseconds) Loss vs. Win (Low-Risk) -115.7 -128.8 -102.6 645.0 -17.4 &lt;.001 120.34 0.351 RT (milliseconds) High- vs. Low-Risk (Loss) -170.4 -195.6 -145.2 878.3 -13.3 &lt;.001 114.20 0.615 RT (milliseconds) High- vs. Low-Risk (Win) -210.9 -240.8 -181.1 875.4 -13.9 &lt;.001 124.56 0.642 RT (milliseconds) High- vs. Low-Risk (Difference) 40.5 26.5 54.5 849.0 5.7 &lt;.001 20.37 0.262 RT (z scores) Loss vs. Win (High-Risk) -0.288 -0.304 -0.273 1677.0 -35.8 &lt;.001 472.22 1.732 RT (z scores) Loss vs. Win (Low-Risk) -0.347 -0.379 -0.315 645.0 -21.1 &lt;.001 166.10 1.643 RT (z scores) High- vs. Low-Risk (Loss) 0.010 0.003 0.018 994.0 2.6 0.009 1.04 0.120 RT (z scores) High- vs. Low-Risk (Win) -0.048 -0.076 -0.020 963.6 -3.3 0.003 3.79 0.153 RT (z scores) High- vs. Low-Risk (Difference) 0.058 0.023 0.094 971.5 3.2 0.003 3.25 0.148 # kable(comp, &quot;latex&quot;, # caption = &quot;Pairwise comparisons for effects on speed of play&quot;, # booktabs = T, align = &quot;l&quot;) %&gt;% # collapse_rows(columns = 1) %&gt;% # kable_styling(latex_options = &quot;scale_down&quot;) 7.4 Combined plots Combine all plots - this is the main figure included in the manuscript. stop_plot_main &lt;- stop_plot_main + ggtitle(&quot;When to stop&quot;) stake_change_prob_plot &lt;- stake_change_prob_plot + ggtitle(&quot;Probability of changing stake&quot;) stake_change_size_plot &lt;- stake_change_size_plot + ggtitle(&quot;Change in stake size&quot;) rt_z_plot &lt;- rt_z_plot + ggtitle(&quot;Speed of play&quot;) combined_plot &lt;- (stop_plot_main + stake_change_prob_plot)/(stake_change_size_plot + rt_z_plot) + plot_layout(guides = &quot;collect&quot;) &amp; theme(legend.position = &quot;bottom&quot;) combined_plot &lt;- combined_plot + plot_annotation(tag_levels = &quot;A&quot;) ggsave(&quot;figure/loss_chasing.eps&quot;, combined_plot, width = 7, height = 8) ggsave(&quot;figure/loss_chasing.png&quot;, combined_plot, width = 7, height = 8) "]]
